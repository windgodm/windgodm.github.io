{"title":"《逆向工程实战》实例B","uid":"49cfcba348975accba6443ccf555c536","slug":"practicalreB","date":"2022-03-08T04:00:00.000Z","updated":"2022-04-13T13:58:06.965Z","comments":true,"path":"api/articles/practicalreB.json","keywords":null,"cover":null,"content":"<h1 id=\"《逆向工程实战》实例B（练习部分）\"><a href=\"#《逆向工程实战》实例B（练习部分）\" class=\"headerlink\" title=\"《逆向工程实战》实例B（练习部分）\"></a>《逆向工程实战》实例B（练习部分）</h1><p>参照书上对实例B<code>OnProcessNotify(sub_4045F8)</code>、<code>sub_4038F0</code>的分析<br>对实例B进行的一些分析记录</p>\n<p>一个x64的驱动后门</p>\n<p><strong>进程创建回调</strong>、<strong>sub_4038F0</strong>部分是根据书本分析过程复现的记录</p>\n<h2 id=\"结构体还原\"><a href=\"#结构体还原\" class=\"headerlink\" title=\"结构体还原\"></a>结构体还原</h2><p>在40A590有一个结构体，根据api的调用尝试还原其结构的定义</p>\n<p><strong>OnProcessNotify(sub_4045F8)</strong></p>\n<p>由循环可以确定+0处是结构体指针next，是一个链表</p>\n<p>根据循环结束处的处理，猜测+8是结构体指针last，是一个双向链表</p>\n<p>实际上+0就是<code>LIST_ENTRY</code>，后面有类似<code>RemoveEntryListmacro</code>的代码</p>\n<p>根据其中用到的Mm系列api，可以推出部分结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; hex\n+   0  next              struc*\n+   8  last              struc*\n+  10  pid               4\n+  14  unknown           0xC\n+  20  strImageFilename  char[0x70]\n+  90  resource          ERESOURCE\n+  F8  unknown           0xF78\n+1070  pMdl              MDL*\n+1078  addr1             void*\n+1080  unknown           0x30\n+10B0  addr2             void*</code></pre>\n\n<p><code>addr1</code>是通过<code>Mdl</code>重新映射的，<code>addr2</code>是通过<code>ExPoolWithTag</code>分配的</p>\n<p>其中有如下代码，不太确定其意义：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">for(i &#x3D; stru_40A590.next; ;) &#123;\n    if() &#123;\n        &#x2F;&#x2F; ...\n        if ( i-&gt;addr2 )\n            ExFreePoolWithTag(i-&gt;addr2, &#39;ssss&#39;);\n        &#x2F;&#x2F; ...\n        ExFreePoolWithTag(i, &#39;ssss&#39;);\n        &#x2F;&#x2F; ...\n    &#125;\n&#125;</code></pre>\n\n\n\n<h2 id=\"进程创建回调\"><a href=\"#进程创建回调\" class=\"headerlink\" title=\"进程创建回调\"></a>进程创建回调</h2><p>DriverEntry中注册了进程回调函数：<code>OnProcessNotify(sub_4045F8)</code></p>\n<p>只有在进程注销的时候才执行</p>\n<p>进入<code>CriticalRegion</code>并请求<code>ExAcquireResourceExclusiveLite</code></p>\n<p>然后通过遍历一个双向链表<code>stru_40A590</code>，找到与当前（准备注销的进程）相关（imageFileName和pid相同）的表项，释放表项占用的内存并移出链表</p>\n<p>表项中有一个使用Mdl重映射的地址，会解除该映射</p>\n<p>还有一个通过tag分配的内存（不确定是页池还是非页池），表项本身也是通过tag分配的</p>\n<p>两者都会通过<code>ExFreePoolWithTag(&#39;ssss&#39;)</code>释放</p>\n<h2 id=\"DeleteFileByIrp-sub-4038F0\"><a href=\"#DeleteFileByIrp-sub-4038F0\" class=\"headerlink\" title=\"DeleteFileByIrp(sub_4038F0)\"></a>DeleteFileByIrp(sub_4038F0)</h2><p>该函数的功能是构造一个IRP删除指定的文件，传递IRP后会一直等待直到IRP被处理完成</p>\n<p>（通过交叉引用发现该函数最终被用于删除<code>mbam.sys</code>）</p>\n<p>先是通过<code>Stack = pirp-&gt;Tail.Overlay.CurrentStackLocation</code>获取当前的堆栈</p>\n<p>然后通过<code>Stack[-1]</code>对下一层堆栈进行填充（可能是编译器优化掉了获取下一层堆栈的代码）</p>\n<p>最后调用<code>IofCallDriver</code>把Irp传给别的设备处理（书中猜测是文件系统）</p>\n<p>根据<code>Stack[-1].MajorFunction = IRP_MJ_SET_INFORMATION; // 6</code>可以判断出下面union的是<code>SetFile</code>字段</p>\n<p>填充的比较重要的内容如下：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">buf &#x3D; 1;\npirp-&gt;AssociatedIrp.SystemBuffer &#x3D; &amp;buf;\n&#x2F;&#x2F; ...\nStack[-1].Parameters.SetFile.DeleteHandle &#x3D; hFile;\nStack[-1].Parameters.SetFile.FileObject &#x3D; pFileObj;\nStack[-1].Parameters.SetFile.FileInformationClass &#x3D; FileDispositionInformation;\nStack[-1].Parameters.SetFile.Length &#x3D; 1;</code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>IRP_MJ_SET_INFORMATION</strong></p>\n<p>Parameters.SetFile.FileInformationClass：SystemBuffer指向的结构体的类型</p>\n<p>Parameters.SetFile.Length：SystemBuffer指向结构体的长度</p>\n<p>AssociatedIrp.SystemBuffer：指向包含新信息设置的缓冲区</p>\n<p><strong>NtSetInformationFile function (ntifs.h)</strong></p>\n<p>FileDispositionInformation (13) 请求在文件关闭时将其删除</p>\n<p><strong>FILE_DISPOSITION_INFORMATION_EX structure (ntddk.h)</strong></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">typedef struct _FILE_DISPOSITION_INFORMATION_EX &#123;\nULONG Flags;\n&#125; FILE_DISPOSITION_INFORMATION_EX, *PFILE_DISPOSITION_INFORMATION_EX;</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>Flag Name</th>\n<th>Value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FILE_DISPOSITION_DELETE</td>\n<td>0x00000001</td>\n<td>Specifies the system should delete a file.</td>\n</tr>\n</tbody></table></blockquote>\n<p>根据以上信息，<code>FileDispositionInformation</code>指示<code>SystemBuffer</code>的类型为<code>_FILE_DISPOSITION_INFORMATION_EX</code><br>而该结构体内容为<code>Flags=1</code>，即删除文件的意思</p>\n<p>给IRP添加了一个完成例程<code>Stack_1[-1].CompletionRoutine = CompletaRoutine</code>（sub_4038B4）</p>\n<p>该完成例程会设置IRP的Event，用于通知上一层处理函数（即<code>sub_4038F0</code>）IRP已完成</p>\n<p>在<code>sub_4038F0</code>会等待该事件：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">if ( IofCallDriver(pDevObj_, pirp_1) &#x3D;&#x3D; 0x103 )&#x2F;&#x2F; STATUS_PENDING\n    KeWaitForSingleObject(&amp;Event, Executive, 0, 1u, 0i64);&#x2F;&#x2F; Event will be set in CompletionRoutine\nreturn (unsigned int)pirp_1-&gt;IoStatus.Status;</code></pre>\n\n","text":"《逆向工程实战》实例B（练习部分）参照书上对实例BOnProcessNotify(sub_4045F8)、sub_4038F0的分析对实例B进行的一些分析记录 一个x64的驱动后门 进程创建回调、sub_4038F0部分是根据书本分析过程复现的记录 结构体还原在40A590有一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%88%98%E3%80%8B%E5%AE%9E%E4%BE%8BB%EF%BC%88%E7%BB%83%E4%B9%A0%E9%83%A8%E5%88%86%EF%BC%89\"><span class=\"toc-text\">《逆向工程实战》实例B（练习部分）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E8%BF%98%E5%8E%9F\"><span class=\"toc-text\">结构体还原</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%9B%9E%E8%B0%83\"><span class=\"toc-text\">进程创建回调</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DeleteFileByIrp-sub-4038F0\"><span class=\"toc-text\">DeleteFileByIrp(sub_4038F0)</span></a></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"《逆向工程实战》实例D","uid":"59b8a2ac42b98d74611bef705cd30176","slug":"practicalreD","date":"2022-03-11T04:00:00.000Z","updated":"2022-04-13T13:58:55.515Z","comments":true,"path":"api/articles/practicalreD.json","keywords":null,"cover":null,"text":"《逆向工程实战》实例D摘要基本信息 x86 Device Name：\\Device\\ProcPanama SymbolLink Name：\\DosDevices\\ProcPanama IRP：Create、Close、DeviceIoCtrl 回调：进程 函数分析结果 sub_1...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《逆向工程实战》实例A","uid":"a8aaa1ce0f83038b9e68ef408652298f","slug":"practicalreA","date":"2022-03-07T04:00:00.000Z","updated":"2022-04-13T13:57:40.716Z","comments":true,"path":"api/articles/practicalreA.json","keywords":null,"cover":null,"text":"《逆向工程实战》实例A参照书上对实例A的分析过程，对实例A的完整分析记录 一个挺短的驱动后门（x86），用于支持R3程序修改SSDT，估计是xp或者win7时代的 DriverEntry &amp; DriverUnloadDosDevices是??的别名 DriverEntry...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}