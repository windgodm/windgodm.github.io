{"title":"APIHook DLL注入实现IAT钩取 笔记","uid":"cc4abc1dfb3fac0a8ab6b7033be4ca99","slug":"APIHookDllIATCalc","date":"2021-06-19T06:22:00.000Z","updated":"2021-09-28T10:22:11.422Z","comments":true,"path":"api/articles/APIHookDllIATCalc.json","keywords":null,"cover":null,"content":"<h1 id=\"APIHook-DLL注入实现IAT钩取-笔记\"><a href=\"#APIHook-DLL注入实现IAT钩取-笔记\" class=\"headerlink\" title=\"APIHook - DLL注入实现IAT钩取 笔记\"></a>APIHook - DLL注入实现IAT钩取 笔记</h1><h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>技术摘要：</p>\n<p><strong>动态</strong>修改<strong>进程内存</strong>中的<strong>IAT</strong>。利用<strong>DLL注入</strong>修改API的IAT。</p></blockquote>\n<p>起源是逆向工程核心原理里面以计算器SetWindowText()API钩取为例讲解利用dll注入修改api的iat来实现钩取。<br>该例子目标是把显示的阿拉伯数字改成中文数字。</p>\n<h2 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h2><p>补丁函数（新api）要申明为WINAPI，即stdcall。c++默认的是cdecl，由调用者处理栈。而api使用的stdcall是由被调用者处理的。如果不声明为stdcall，调用钩取api结束时本应该清理栈，而实际上不会清理。同样钩取api中调用原api时，原api结束时清理了一次栈，而我们的钩取api又会再处理一次栈。这时esp指向的不是旧ebp，pop ebp时就会触发错误。<br>实际上由于win32 api为stdcall，使得我们的新函数对栈不需要做特殊操作。</p>\n<h2 id=\"实例：计算器SetWindowTextW-（x32）\"><a href=\"#实例：计算器SetWindowTextW-（x32）\" class=\"headerlink\" title=\"实例：计算器SetWindowTextW()（x32）\"></a>实例：计算器SetWindowTextW()（x32）</h2><p>该例子对象是xp的x32的calc.exe，运行环境是在win10中。（我把xp虚拟机里的计算机复制出来了）在win10的计算机中尝试失败了，还没找到原因。</p>\n<p>下面的步骤按运行时的执行顺序来写。</p>\n<h3 id=\"1-dll注入\"><a href=\"#1-dll注入\" class=\"headerlink\" title=\"1 dll注入\"></a>1 dll注入</h3><p>第一步是把后面编写好的dll注入到目标程序中，关于dll注入的内容在此略过。</p>\n<h3 id=\"2-dll\"><a href=\"#2-dll\" class=\"headerlink\" title=\"2 dll\"></a>2 dll</h3><p>当 dll第一次加载进进程(DLL_PROCESS_ATTACH) 时先记录原本api的地址，如何再hook。</p>\n<p>当 卸载dll(DLL_PROCESS_DETACH) 时unhook。</p>\n<p>因为hook实际上就是把iat中被钩取api的地址换成补丁函数的地址，而unhook的过程则反过来把iat中补丁函数地址换回原本地址，所以可以统一写成一个函数hook_iat()。该函数会将oldFunc替换成newFunc。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">bool hook_iat(char* pszDllName, HANDLE oldFunc, HANDLE newFunc);\nBOOL WINAPI MySetWindowTextW(\n    HWND    hWnd,\n    LPCWSTR lpString\n);\n\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n&#123;\n    switch (ul_reason_for_call) &#123;\n    case DLL_PROCESS_ATTACH:\n        &#x2F;&#x2F; save origin api\n        pOriginFunc &#x3D; GetProcAddress(GetModuleHandleW(L&quot;user32.dll&quot;), &quot;SetWindowTextW&quot;);\n        &#x2F;&#x2F; hook\n        hook_iat(&quot;user32.dll&quot;, pOriginFunc, MySetWindowTextW);\n        break;\n    case DLL_PROCESS_DETACH:\n        &#x2F;&#x2F;unhook\n        hook_iat(&quot;user32.dll&quot;, MySetWindowTextW, pOriginFunc);\n        break;\n    &#125;\n    return TRUE;\n&#125;</code></pre>\n\n<h3 id=\"3-改写iat（hook-iat-）\"><a href=\"#3-改写iat（hook-iat-）\" class=\"headerlink\" title=\"3 改写iat（hook_iat()）\"></a>3 改写iat（hook_iat()）</h3><p>这个函数用于把iat中名为 pszDllName 的 library 中的 oldFunc 换成 newFunc。本质上整段代码就是在解析pe文件以及遍历iat。这里不做详细解析，详见反射注入文章[2]中 处理导入表 部分内容。</p>\n<p>其中用到了size_t，这是个与机器有关的unsigned类型。说人话就是按32位编译时是32位；按64位编译时是64位。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">bool hook_iat(char* pszDllName, HANDLE oldFunc, HANDLE newFunc)\n&#123;\n    &#x2F;&#x2F; pe\n    PIMAGE_DOS_HEADER pDosHeader &#x3D; (PIMAGE_DOS_HEADER)GetModuleHandleW(NULL);\n    PIMAGE_NT_HEADERS32 pNtHeader &#x3D; (PIMAGE_NT_HEADERS32)padd(pDosHeader, pDosHeader-&gt;e_lfanew);\n    PIMAGE_IMPORT_DESCRIPTOR pImportDescriptor &#x3D; (PIMAGE_IMPORT_DESCRIPTOR)padd(pDosHeader, pNtHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);\n\n    &#x2F;&#x2F; find dll\n    LPCSTR pszLibName;\n    for (; pImportDescriptor-&gt;Name; pImportDescriptor++) &#123;\n        pszLibName &#x3D; (LPCSTR)padd(pDosHeader, pImportDescriptor-&gt;Name);\n        if (_stricmp(pszLibName, pszDllName) &#x3D;&#x3D; 0) &#123;\n            &#x2F;&#x2F; find old func\n            PIMAGE_THUNK_DATA32 pThunk &#x3D; (PIMAGE_THUNK_DATA32)padd(pDosHeader, pImportDescriptor-&gt;FirstThunk);\n            for (; pThunk-&gt;u1.Function; pThunk++) &#123;\n                if (pThunk-&gt;u1.Function &#x3D;&#x3D; (size_t)oldFunc) &#123;\n                    &#x2F;&#x2F; replace\n                    DWORD dwOldProt;\n                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, 4, PAGE_EXECUTE_READWRITE, &amp;dwOldProt);\n                    pThunk-&gt;u1.Function &#x3D; (size_t)newFunc;\n                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, 4, dwOldProt, &amp;dwOldProt);\n\n                    return true;\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n\n    return false;\n&#125;</code></pre>\n\n<h3 id=\"4-新api（补丁代码-MySetWindowTextW-）\"><a href=\"#4-新api（补丁代码-MySetWindowTextW-）\" class=\"headerlink\" title=\"4 新api（补丁代码 MySetWindowTextW()）\"></a>4 新api（补丁代码 MySetWindowTextW()）</h3><p>这部分代码参考逆向工程核心原理[1]，这个函数用于将unicode的数字转换成中文数字。temp数组的目的是构造一个0结尾的字符串，用于_wtoi。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef BOOL(WINAPI *SETWINDOWTEXTW)(HWND, LPCWSTR);\n\nBOOL WINAPI MySetWindowTextW(\n    HWND    hWnd,\n    LPCWSTR lpString\n)\n&#123;\n    wchar_t pNumTab[] &#x3D; L&quot;零一二三四五六七八九&quot;;\n    wchar_t temp[2] &#x3D; &#123; 0, &#125;; &#x2F;&#x2F; for wtoi\n    size_t i, nLen, nIndex;\n\n    nLen &#x3D; wcslen(lpString);\n    for (i &#x3D; 0; i &lt; nLen; i++) &#123;\n        &#x2F;&#x2F; translate\n        if (L&#39;0&#39; &lt;&#x3D; lpString[i] &amp;&amp; lpString[i] &lt;&#x3D; L&#39;9&#39;) &#123;\n            temp[0] &#x3D; lpString[i];\n            nIndex &#x3D; _wtoi(temp);\n            ((wchar_t*)lpString)[i] &#x3D; pNumTab[nIndex];\n        &#125;\n    &#125;\n\n    return ((SETWINDOWTEXTW)pOriginFunc)(hWnd, lpString);\n&#125;</code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] 逆向工程核心原理：part4-API钩取：第32章-计算器显示中文数字</p>\n<p>[2] 反射注入 <a href=\"https://bbs.pediy.com/thread-266929.htm\">看雪文章链接</a> <a href=\"https://windgodm.github.io/blog/2021/04/11/reflectiveDllInjection/\">博客文章链接</a></p>\n","text":"APIHook - DLL注入实现IAT钩取 笔记摘要 技术摘要： 动态修改进程内存中的IAT。利用DLL注入修改API的IAT。 起源是逆向工程核心原理里面以计算器SetWindowText()API钩取为例讲解利用dll注入修改api的iat来实现钩取。该例子目标是把显示的阿...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"api_hook","slug":"api-hook","count":3,"path":"api/tags/api-hook.json"},{"name":"reversecore","slug":"reversecore","count":4,"path":"api/tags/reversecore.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#APIHook-DLL%E6%B3%A8%E5%85%A5%E5%AE%9E%E7%8E%B0IAT%E9%92%A9%E5%8F%96-%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\">APIHook - DLL注入实现IAT钩取 笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">细节</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%EF%BC%9A%E8%AE%A1%E7%AE%97%E5%99%A8SetWindowTextW-%EF%BC%88x32%EF%BC%89\"><span class=\"toc-text\">实例：计算器SetWindowTextW()（x32）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-dll%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">1 dll注入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-dll\"><span class=\"toc-text\">2 dll</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%94%B9%E5%86%99iat%EF%BC%88hook-iat-%EF%BC%89\"><span class=\"toc-text\">3 改写iat（hook_iat()）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%96%B0api%EF%BC%88%E8%A1%A5%E4%B8%81%E4%BB%A3%E7%A0%81-MySetWindowTextW-%EF%BC%89\"><span class=\"toc-text\">4 新api（补丁代码 MySetWindowTextW()）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"APIHook DLL注入实现代码钩取 笔记","uid":"5e05a9de597a39befc3bd53d02dc7c56","slug":"APIHookDllCodeHideProc","date":"2021-06-24T06:44:00.000Z","updated":"2021-09-28T10:22:14.123Z","comments":true,"path":"api/articles/APIHookDllCodeHideProc.json","keywords":null,"cover":null,"text":"APIHook - DLL注入实现代码钩取 笔记摘要 技术摘要： 动态修改进程内存中的代码。利用DLL注入修改代码开头跳转到补丁代码。 起源是逆向工程核心原理里面以任务管理器ZwQuerySystemInformation()API钩取为例讲解利用dll注入修改api的起始代码为...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"api_hook","slug":"api-hook","count":3,"path":"api/tags/api-hook.json"},{"name":"reversecore","slug":"reversecore","count":4,"path":"api/tags/reversecore.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"APIHook 调试技术 笔记","uid":"647fdfb1f4686f6ba30a2feb4f787ced","slug":"APIHookDebugNotebook","date":"2021-06-17T14:10:00.000Z","updated":"2021-09-28T10:22:08.768Z","comments":true,"path":"api/articles/APIHookDebugNotebook.json","keywords":null,"cover":null,"text":"APIHook-调试技术 笔记摘要 技术摘要： 动态修改进程内存中的代码。利用调试技术附加到目标进程钩取API。 术语： debuger：调试器debugee：被调试者 起源是逆向工程核心原理里面以记事本WriteFile()API钩取为例讲解利用调试来实现API钩取。该例子目标...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"api_hook","slug":"api-hook","count":3,"path":"api/tags/api-hook.json"},{"name":"reversecore","slug":"reversecore","count":4,"path":"api/tags/reversecore.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}