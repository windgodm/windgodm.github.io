{"title":"MEMZ彩虹猫分析","uid":"25dfe92efe3817312d385cfe3a16b7f2","slug":"memz","date":"2021-08-13T04:00:00.000Z","updated":"2021-09-28T10:21:28.040Z","comments":true,"path":"api/articles/memz.json","keywords":null,"cover":[],"content":"<h1 id=\"MEMZ彩虹猫分析\"><a href=\"#MEMZ彩虹猫分析\" class=\"headerlink\" title=\"MEMZ彩虹猫分析\"></a>MEMZ彩虹猫分析</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p><img src=\"https://z3.ax1x.com/2021/09/05/hWm3QA.png\" alt=\"MEMZ流程\"></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void start()\n&#123;\n\t&#x2F;&#x2F; 紫色部分\n\tif(arbc &gt; 1)\n\t&#123;\n\t\tif(!lstrcmpW(argv[1], L&quot;&#x2F;watchdog&quot;))\n        &#123;\n            &#x2F;&#x2F; 红色部分\n        &#125;\n        &#x2F;&#x2F; 绿色部分\n\t&#125;\n    &#x2F;&#x2F; 蓝色部分\n&#125;</code></pre>\n\n<p>根据命令行参数不同，实际上会有三种效果。</p>\n<p>第一种（蓝色部分）是不带参数，会弹两次警告窗口，然后带参数的打开自身。</p>\n<p>第二种（绿色部分）是带参数且argv[1] != “/watchdog”。会往硬盘写入恶意代码，修改mbr；然后打开一个notepad；接着是捣乱十阶段：依次创建十个线程分别搞破坏。</p>\n<p>第三种（红色部分）是argv[1] != “/watchdog”，会创建一个线程用于检测除彩虹猫以外的进程数量，如果有减少，会触发蓝屏与重启。主线程会创建一个消息循环，接收到关闭消息也会触发蓝屏与重启。</p>\n<h2 id=\"细节分析\"><a href=\"#细节分析\" class=\"headerlink\" title=\"细节分析\"></a>细节分析</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">struct&#123;\n    LPVOID pFunc;\n    unsigned int sleepTime;\n&#125;struc_1;</code></pre>\n\n<h3 id=\"无参数部分代码\"><a href=\"#无参数部分代码\" class=\"headerlink\" title=\"无参数部分代码\"></a>无参数部分代码</h3><p><img src=\"https://z3.ax1x.com/2021/09/05/hWmHw6.png\" alt=\"MEMZ_none\"></p>\n<p>这部分代码比较普通，api都有符号，直接查MSDN即可。</p>\n<h3 id=\"非-watchdog部分代码\"><a href=\"#非-watchdog部分代码\" class=\"headerlink\" title=\"非/watchdog部分代码\"></a>非/watchdog部分代码</h3><p>运行这部分的进程优先级会被设为高。</p>\n<p>这部分代码的结尾有个死循环sleep，所以不会运行无参数部分的代码。</p>\n<p><strong>修改MBR，写入恶意代码</strong></p>\n<p><img src=\"https://z3.ax1x.com/2021/09/05/hWmIyR.png\" alt=\"MEMZ_main1\"></p>\n<p>比较有意思的是文件名为<code>\\\\.PhysicalDrive0</code>可以打开磁盘0，并覆写MBR</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">hFile &#x3D; CreateFileA(&quot;\\\\\\\\.\\\\PhysicalDrive0&quot;, 0xC0000000, 3u, 0, 3u, 0, 0);&#x2F;&#x2F; 打开物理驱动器0</code></pre>\n\n<p>写入的shellcode没有分析。</p>\n<p><strong>打开记事本嘲讽</strong></p>\n<p><img src=\"https://z3.ax1x.com/2021/09/05/hWmoO1.png\" alt=\"MEMZ_main2\"></p>\n<p>然后写入记事本并打开。</p>\n<p><strong>捣乱十连</strong></p>\n<p><img src=\"https://z3.ax1x.com/2021/09/05/hWm5l9.png\" alt=\"MEMZ_main3\"></p>\n<p>随后有个捣乱十阶段，间隔一定时间，创建十个线程，分别执行十个函数，下面是我稍微整理了下的代码。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">for(i &#x3D; 0; i &lt; 10; i++)\n&#123;\n    Sleep(messFuncs[i].sleepTime);\n    CreateThread(0, 0, LoopCallMess, &amp;messFuncs[i], 0, 0);\n&#125;</code></pre>\n\n<p>其中messFuncs是一个结构体数组，猜测定义如下。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef struct _struc_1&#123;\n    LPVOID pFunc;\n    unsigned int sleepTime;\n&#125;struc_1;\nstruc_1 messFuncs[10];</code></pre>\n\n<p>执行的那十个函数的分析见下面的捣乱十阶段。</p>\n<h3 id=\"watchdog部分代码\"><a href=\"#watchdog部分代码\" class=\"headerlink\" title=\"/watchdog部分代码\"></a>/watchdog部分代码</h3><p>创建一个线程，然后创建一个消息循环。</p>\n<p><strong>创建的线程</strong></p>\n<p>创建的线程会不断的创建快照，然后统计除MEMZ以外的进程数，如果有减少就执行一个导致蓝屏与重启的函数。</p>\n<p>判断是否是MEMZ的方法是检测进程路径。</p>\n<p><strong>消息循环</strong></p>\n<p>消息循环函数在接收到关闭信息也会执行导致蓝屏与重启的函数。</p>\n<h3 id=\"蓝屏与重启\"><a href=\"#蓝屏与重启\" class=\"headerlink\" title=\"蓝屏与重启\"></a>蓝屏与重启</h3><p><img src=\"https://z3.ax1x.com/2021/09/05/hWm7ex.png\" alt=\"MEMZ_reboot\"></p>\n<p>先循环创建20个线程执行一个函数。</p>\n<p>然后直接获取ntdll的api，然后调用触发蓝屏的函数。随后重启。</p>\n<p>那20个线程执行的函数，会SetWindowsHook，hook函数会在窗口创建时随机随机修改窗口位置，随后调用MessageBoxA创建一个窗口，随机弹出嘲讽信息，由于设置了钩子，这个窗口位置是随机的。最后撤销钩子。</p>\n<h3 id=\"捣乱十阶段\"><a href=\"#捣乱十阶段\" class=\"headerlink\" title=\"捣乱十阶段\"></a>捣乱十阶段</h3><h4 id=\"阶段一：乱开网页和窗口\"><a href=\"#阶段一：乱开网页和窗口\" class=\"headerlink\" title=\"阶段一：乱开网页和窗口\"></a>阶段一：乱开网页和窗口</h4><p>从46条字符串里随机挑一条作为ShellExecuteA的参数，相当于在运行一个shell，字符串是shell的输入。如果字符串是网页链接，就会打开网页。还可以是<code>calc</code>，<code>notepad</code>等，将打开对应的程序。</p>\n<h4 id=\"阶段二：乱动鼠标\"><a href=\"#阶段二：乱动鼠标\" class=\"headerlink\" title=\"阶段二：乱动鼠标\"></a>阶段二：乱动鼠标</h4><p>获取鼠标坐标，然后加上随机数，最后再修改鼠标坐标，达到让鼠标乱抖的效果。</p>\n<h4 id=\"阶段三：乱按键盘\"><a href=\"#阶段三：乱按键盘\" class=\"headerlink\" title=\"阶段三：乱按键盘\"></a>阶段三：乱按键盘</h4><p>调用SendInput api。</p>\n<h4 id=\"阶段四：乱放系统声音\"><a href=\"#阶段四：乱放系统声音\" class=\"headerlink\" title=\"阶段四：乱放系统声音\"></a>阶段四：乱放系统声音</h4><p>调用PlaySoundA api。</p>\n<h4 id=\"阶段五：反转桌面窗口颜色\"><a href=\"#阶段五：反转桌面窗口颜色\" class=\"headerlink\" title=\"阶段五：反转桌面窗口颜色\"></a>阶段五：反转桌面窗口颜色</h4><p>获取窗口句柄，然后用BitBlt()反转颜色。</p>\n<h4 id=\"阶段六：嘲讽弹窗\"><a href=\"#阶段六：嘲讽弹窗\" class=\"headerlink\" title=\"阶段六：嘲讽弹窗\"></a>阶段六：嘲讽弹窗</h4><p>创建一个线程，该线程做的东西和前面StartAddresss那个函数差不多，也是通过SetWindowsHook实现随机位置弹出MessageBox，显示嘲讽信息。</p>\n<h4 id=\"阶段七：错误图标\"><a href=\"#阶段七：错误图标\" class=\"headerlink\" title=\"阶段七：错误图标\"></a>阶段七：错误图标</h4><p>获取鼠标坐标，然后在鼠标旁边画图标。</p>\n<h4 id=\"阶段八：反转文字\"><a href=\"#阶段八：反转文字\" class=\"headerlink\" title=\"阶段八：反转文字\"></a>阶段八：反转文字</h4><p>通过EnumChildWindows给全部窗口设一个回调函数，这个回调函数通过SendMessageTimeoutW发送信号给窗口，获取窗口的文字，然后把文字顺序反转，再发送信号给窗口更改文字。</p>\n<h4 id=\"阶段九：无限桌面\"><a href=\"#阶段九：无限桌面\" class=\"headerlink\" title=\"阶段九：无限桌面\"></a>阶段九：无限桌面</h4><p>有点类似阶段五，不过这次不是反转颜色，可以理解为把桌面截图，然后向右和向下各平移50像素后覆盖到原来桌面。</p>\n<h4 id=\"阶段十：混乱桌面\"><a href=\"#阶段十：混乱桌面\" class=\"headerlink\" title=\"阶段十：混乱桌面\"></a>阶段十：混乱桌面</h4><p>类似阶段九，不过这次是随机覆盖。</p>\n","text":"MEMZ彩虹猫分析流程 void start() &#123; &#x2F;&#x2F; 紫色部分 if(arbc &gt; 1) &#123; if(!lstrcmpW(argv[1], L&quot;&#x2F;watchdog&quot;)) &#123; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Virus","slug":"Virus","count":1,"path":"api/categories/Virus.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"virus","slug":"virus","count":1,"path":"api/tags/virus.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MEMZ%E5%BD%A9%E8%99%B9%E7%8C%AB%E5%88%86%E6%9E%90\"><span class=\"toc-text\">MEMZ彩虹猫分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%86%E8%8A%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">细节分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%8F%82%E6%95%B0%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">无参数部分代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E-watchdog%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">非&#x2F;watchdog部分代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#watchdog%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">&#x2F;watchdog部分代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%93%9D%E5%B1%8F%E4%B8%8E%E9%87%8D%E5%90%AF\"><span class=\"toc-text\">蓝屏与重启</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8D%A3%E4%B9%B1%E5%8D%81%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">捣乱十阶段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%9A%E4%B9%B1%E5%BC%80%E7%BD%91%E9%A1%B5%E5%92%8C%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">阶段一：乱开网页和窗口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E4%BA%8C%EF%BC%9A%E4%B9%B1%E5%8A%A8%E9%BC%A0%E6%A0%87\"><span class=\"toc-text\">阶段二：乱动鼠标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E4%B8%89%EF%BC%9A%E4%B9%B1%E6%8C%89%E9%94%AE%E7%9B%98\"><span class=\"toc-text\">阶段三：乱按键盘</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E5%9B%9B%EF%BC%9A%E4%B9%B1%E6%94%BE%E7%B3%BB%E7%BB%9F%E5%A3%B0%E9%9F%B3\"><span class=\"toc-text\">阶段四：乱放系统声音</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E4%BA%94%EF%BC%9A%E5%8F%8D%E8%BD%AC%E6%A1%8C%E9%9D%A2%E7%AA%97%E5%8F%A3%E9%A2%9C%E8%89%B2\"><span class=\"toc-text\">阶段五：反转桌面窗口颜色</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E5%85%AD%EF%BC%9A%E5%98%B2%E8%AE%BD%E5%BC%B9%E7%AA%97\"><span class=\"toc-text\">阶段六：嘲讽弹窗</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E4%B8%83%EF%BC%9A%E9%94%99%E8%AF%AF%E5%9B%BE%E6%A0%87\"><span class=\"toc-text\">阶段七：错误图标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E5%85%AB%EF%BC%9A%E5%8F%8D%E8%BD%AC%E6%96%87%E5%AD%97\"><span class=\"toc-text\">阶段八：反转文字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E4%B9%9D%EF%BC%9A%E6%97%A0%E9%99%90%E6%A1%8C%E9%9D%A2\"><span class=\"toc-text\">阶段九：无限桌面</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E5%8D%81%EF%BC%9A%E6%B7%B7%E4%B9%B1%E6%A1%8C%E9%9D%A2\"><span class=\"toc-text\">阶段十：混乱桌面</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vmp2 (1) 初步分析","uid":"168fbfd9ad872dd1d16955f2d30e829c","slug":"vmp2-p1","date":"2021-09-13T04:00:00.000Z","updated":"2021-09-28T10:29:17.779Z","comments":true,"path":"api/articles/vmp2-p1.json","keywords":null,"cover":null,"text":"VMP2（1）初步分析摘要初步分析VMProtect Ultimate v 2.13.5加密后的程序，得出vmp基本结构的总结。 基本信息 版本：VMProtect Ultimate v 2.13.5 vmp代码在tls中。 下面是分析出的一些寄存器在vmp中的作用： 寄存器 描...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Re","slug":"Re","count":4,"path":"api/categories/Re.json"}],"tags":[{"name":"re","slug":"re","count":12,"path":"api/tags/re.json"},{"name":"vmp2","slug":"vmp2","count":3,"path":"api/tags/vmp2.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"简易压缩壳笔记","uid":"0655b50c19b52b6b171bbab9b69a5ecc","slug":"SimplePack","date":"2021-08-04T04:00:00.000Z","updated":"2021-09-28T10:22:22.726Z","comments":true,"path":"api/articles/SimplePack.json","keywords":null,"cover":null,"text":"简易压缩壳笔记流程加壳器： 读取被加壳文件 加载壳代码 复制壳代码的section header 修改ep并保存oep 加密 压缩 清空import、iat directory，保存import directory 清空tls directoru，保存directory的Addr...","link":"","photos":[],"count_time":{"symbolsCount":633,"symbolsTime":"1 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"pack","slug":"pack","count":1,"path":"api/tags/pack.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}