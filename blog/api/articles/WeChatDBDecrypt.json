{"title":"WX数据库自动解密（已失效）","uid":"b4fc70e59f23576dbde3f95657ed4ffe","slug":"WeChatDBDecrypt","date":"2021-07-22T04:00:00.000Z","updated":"2021-11-05T11:34:36.242Z","comments":true,"path":"api/articles/WeChatDBDecrypt.json","keywords":null,"cover":null,"content":"<h1 id=\"微信-PC端-数据库-自动解密\"><a href=\"#微信-PC端-数据库-自动解密\" class=\"headerlink\" title=\"微信 PC端 数据库 自动解密\"></a>微信 PC端 数据库 自动解密</h1><h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>环境:</p>\n<p>win10家庭中文版 10.0.19043 x64（本机）</p>\n<p>微信 3.3.0.115</p>\n<p>openssl-1.0.2r</p></blockquote>\n<p>PC密码为32字节。</p>\n<h2 id=\"手动流程\"><a href=\"#手动流程\" class=\"headerlink\" title=\"手动流程\"></a>手动流程</h2><h3 id=\"获取密码\"><a href=\"#获取密码\" class=\"headerlink\" title=\"获取密码\"></a>获取密码</h3><p>打开微信（不点登录）。</p>\n<p>打开Odb附加WeChat.exe。</p>\n<p>查找-&gt;可执行模块-&gt;WeChatWin。</p>\n<p>用插件找ASCII字符串（我打了中文搜索补丁，直接用中文搜索的搜索ASCII字符串）。</p>\n<p>然后搜索字符串<code>DBFactory::encryptDB</code>，跳转到第一次出现该字符串的位置。这里旧版本可能是第二个字符串的位置。3.3版本我找到了两个，都跳转过去看看，其中一个push语句下面有一个TEST，另一个只有一个call就return了。要找的是有TEST那个。</p>\n<p>该TEST语句就是比较密码的地方，双击设置断点。然后运行并登录。</p>\n<p>停在断点时，选择edx在数据窗口中跟随。</p>\n<p>然后把从edx开始的32字节的数据dump出来，该32字节的数据就是密码。</p>\n<h3 id=\"从源码安装openssl\"><a href=\"#从源码安装openssl\" class=\"headerlink\" title=\"从源码安装openssl\"></a>从源码安装openssl</h3><p>需要用到openssl，据说sqlcipher用的是最低版本的openssl。这里使用1.0.2u。</p>\n<p>首先安装perl。（<a href=\"http://www.activestate.com/activeperl/downloads/%EF%BC%89\">http://www.activestate.com/activeperl/downloads/）</a></p>\n<p>然后运行 x86 Native Tools Command Prompt for VS 2019 这个shell。</p>\n<p>激活perl环境</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">state activate\ncd &#x2F;d D:\\openssl-1.0.2u\\</code></pre>\n\n<p>编译</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">perl Configure VC-WIN64A no-asm -prefix&#x3D;D:\\Program Files\\openssl102u\nms\\do_ms.bat\nnmake -f ms\\ntdll.mak</code></pre>\n\n<p>检查</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">nmake -f ms\\ntdll.mak test</code></pre>\n\n<p>安装</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">nmake -f ms\\ntdll.mak install</code></pre>\n\n<p>奇怪的是最后还是安装到了E:\\usr\\local\\ssl\\这个目录下</p>\n<h3 id=\"解密\"><a href=\"#解密\" class=\"headerlink\" title=\"解密\"></a>解密</h3><p>这里分享vs2019解密的过程。</p>\n<p>在项目的属性页 -&gt; C/C++ -&gt; 常规 -&gt; 附加包含目录 中添加openssl的include目录。</p>\n<p>在项目的属性页 -&gt; 链接器 -&gt; 常规 -&gt; 附加库目录 中添加openssl的include目录。</p>\n<p>在项目的属性页 -&gt; 链接器 -&gt; 输入 -&gt; 附加依赖项 中添加libeay32.lib和ssleay32.lib。</p>\n<p>然后编译运行看雪文章中的代码。（链接见参考）</p>\n<p>然后把E:\\usr\\local\\ssl\\bin\\中的两个dll复制exe的根目录，exe才能正常运行。</p>\n<p>接着把exe和两个dll复制到微信缓存文件的目录/对应用户目录/Msg/里，微信缓存目录名为WeChat Files，可以在微信设置中查到。</p>\n<p>复制过去后运行exe即可。</p>\n<h2 id=\"自动获取（代码修改api-hook）\"><a href=\"#自动获取（代码修改api-hook）\" class=\"headerlink\" title=\"自动获取（代码修改api hook）\"></a>自动获取（代码修改api hook）</h2><h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>代码参考附件。</p>\n<p>总流程如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制dll到wx根目录\n打开微信\n注入dll\n微信登录\ndll把密钥dump出来\n复制聊天记录文件\n解密</code></pre>\n\n<p>其中dll所做的是修改目标函数的起始字节为jmp，跳转到hook函数中，然后读取原函数的参数，把密钥写到文件里，再unhook并跳回原来的位置继续运行。</p>\n<p>因为比较懒，自动化代码没有写卸载dll的东西。另外有时会出现dump出密码后，微信直接闪退的情况。</p>\n<h3 id=\"dll\"><a href=\"#dll\" class=\"headerlink\" title=\"dll\"></a>dll</h3><p>通过注入dll实现修改代码的hook来dump出密钥。</p>\n<p>通过GetModuleHandle获取WeChatWin.dll的基址，然后加上目标api的偏移得到api的地址。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">hApi &#x3D; GetModuleHandleW(L&quot;WeChatWin&quot;) + apiOffset;\nhook_by_5b_code(hApi, (PROC)HookFunc);</code></pre>\n\n<p>然后查看api的代码可以推算出密钥首地址为*(*(esp - 4 + 0x10))，减4是因为有个push ebp。然后剩下的照抄test edx, edx前的代码得到。</p>\n<p>当然也可以直接在test edx, edx的地方跳转，这样直接读edx就行。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">__declspec(naked) void HookFunc()\n&#123;\n    &#123;\n        DWORD _esp &#x3D; 0;\n \n        __asm &#123;\n            mov _esp, esp;\n            pusha;\n        &#125;\n \n        DWORD addr &#x3D; *(DWORD*)(*(DWORD*)(_esp + 0xc));\n        HANDLE hFile &#x3D; CreateFileW(L&quot;.&#x2F;pw.bin&quot;, GENERIC_WRITE, 0, 0, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);\n        WriteFile(hFile, (LPCVOID)addr, 32, NULL, NULL);\n        CloseHandle(hFile);\n        unhook_by_5b_code(hApi);\n \n        __asm &#123;\n            popa;\n            mov ecx, 0x53677E70;\n            jmp ecx;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a>食用指南</h3><p>GetPwHookCodeDll.cpp是dll的代码。AllInOne.cpp是自动解密的代码。需要提供wx根目录位置和微信用户文件的位置。</p>\n<p>wx用户文件的位置：在wx的缓存文件（该目录在wx设置中有）中，有一个叫wxid_xxxxxxx的文件夹，xxxxx是你的初始wx id，这个就是对应wx账户的本地文件。</p>\n<p>假设wx根目录是<code>D:\\WeChat</code>，用户目录是<code>D:\\WeChat Files\\wxid_bravetroops</code>。<br>方法一：在自动程序根目录中打开shell，输入<code>AllInOne.exe D:\\WeChat D:\\WeChat Files\\wxid_bravetroops</code>即可。<br>方法二：在程序根目录中有个aio_cf.txt，第一行输入wx根目录，第二行输入用户目录即可。</p>\n<p>最后会在根目录生成一个dec_ChatMsg.db的文件，就是解密后的聊天记录。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[<a href=\"https://bbs.pediy.com/thread-251303.htm\">原创]PC版微信数据库解密详细教程|bbs.pediy.com</a></p>\n<p><a href=\"https://blog.csdn.net/qq_35014708/article/details/89354694\">window10 安装 OpenSSL_sun-CSDN博客</a></p>\n","text":"微信 PC端 数据库 自动解密摘要 环境: win10家庭中文版 10.0.19043 x64（本机） 微信 3.3.0.115 openssl-1.0.2r PC密码为32字节。 手动流程获取密码打开微信（不点登录）。 打开Odb附加WeChat.exe。 查找-&gt;可执行...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Windows","slug":"Windows","count":14,"path":"api/categories/Windows.json"}],"tags":[{"name":"WX","slug":"WX","count":1,"path":"api/tags/WX.json"},{"name":"Database","slug":"Database","count":2,"path":"api/tags/Database.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E4%BF%A1-PC%E7%AB%AF-%E6%95%B0%E6%8D%AE%E5%BA%93-%E8%87%AA%E5%8A%A8%E8%A7%A3%E5%AF%86\"><span class=\"toc-text\">微信 PC端 数据库 自动解密</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">手动流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">获取密码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85openssl\"><span class=\"toc-text\">从源码安装openssl</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%AF%86\"><span class=\"toc-text\">解密</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%EF%BC%88%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9api-hook%EF%BC%89\"><span class=\"toc-text\">自动获取（代码修改api hook）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dll\"><span class=\"toc-text\">dll</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">食用指南</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"简易压缩壳笔记","uid":"0655b50c19b52b6b171bbab9b69a5ecc","slug":"SimplePack","date":"2021-08-04T04:00:00.000Z","updated":"2021-09-28T10:22:22.726Z","comments":true,"path":"api/articles/SimplePack.json","keywords":null,"cover":null,"text":"简易压缩壳笔记流程加壳器： 读取被加壳文件 加载壳代码 复制壳代码的section header 修改ep并保存oep 加密 压缩 清空import、iat directory，保存import directory 清空tls directoru，保存directory的Addr...","link":"","photos":[],"count_time":{"symbolsCount":633,"symbolsTime":"1 mins."},"categories":[{"name":"Windows","slug":"Windows","count":14,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":14,"path":"api/tags/windows.json"},{"name":"pack","slug":"pack","count":1,"path":"api/tags/pack.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"HammingCode","uid":"9a514a805495433f4105a5ad7faec5ce","slug":"HammingCode","date":"2021-07-14T04:00:00.000Z","updated":"2021-08-11T08:56:20.570Z","comments":true,"path":"api/articles/HammingCode.json","keywords":null,"cover":null,"text":"Hamming Code思路多次奇偶校验，下标为2n的位作为奇偶校验位，校验对象为所有位中小标第n位为1的位，显然包括了一半的数据。 第0位一般弃置，或者作为奇偶校验位的奇偶校验位，这样就可以判断是否存在多个错误。 每一个奇偶校验位都校验了一半的数据，通过检测哪些校验位是错的即可...","link":"","photos":[],"count_time":{"symbolsCount":554,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":1,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"note","slug":"note","count":14,"path":"api/tags/note.json"},{"name":"Error_Correction","slug":"Error-Correction","count":1,"path":"api/tags/Error-Correction.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}