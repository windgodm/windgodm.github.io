{"title":"从0开始：某fpsgo简单透视制作","uid":"7081df1a25a0e63a8adb7b11423fb4be","slug":"fpsgoPerspective","date":"2021-11-08T12:54:00.000Z","updated":"2021-12-05T15:10:44.986Z","comments":true,"path":"api/articles/fpsgoPerspective.json","keywords":null,"cover":null,"content":"<h1 id=\"从0开始：某fpsgo简易透视制作\"><a href=\"#从0开始：某fpsgo简易透视制作\" class=\"headerlink\" title=\"从0开始：某fpsgo简易透视制作\"></a>从0开始：某fpsgo简易透视制作</h1><h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前置知识：</p>\n<p>线性代数知识：矩阵的基本运算</p>\n<p>图形学知识：齐次坐标，仿射变换，MVP模型</p>\n<p>（可选）旋转、四元数与欧拉角（我也不懂）</p>\n<p>其他：CE的基本使用、C++、dll编写与注入、IMGUI</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一些资源：</p>\n<p><a href=\"https://github.com/frk1/hazedumper\">frk1/hazedumper: up to date csgo offsets and hazedumper config (github.com)</a></p>\n<p><a href=\"https://github.com/danielkrupinski/Osiris\">danielkrupinski/Osiris: Free open-source game cheat for Counter-Strike: Global Offensive, written in modern C++. GUI powered by Dear ImGui. (github.com)</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>hazedumper</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&gt;&#x2F;&#x2F; to client.dll\n&gt;constexpr DWORD myObjNodeOff &#x3D; dwEntityList;\n&gt;constexpr DWORD viewMatOff \n&gt;&#x2F;&#x2F; to OBJECT\n&gt;constexpr DWORD healthOff &#x3D; m_iHealth;\n&gt;constexpr DWORD positionOff&#x3D; m_vecOrigin;</code></pre></blockquote>\n<p>hazedumper中有所需要的偏移的地址，抱着学习的目的，就选择手动找了</p>\n<p>流程如下：</p>\n<ul>\n<li><p>1 找基址</p>\n<ul>\n<li>1.1 找object结构体地址</li>\n<li>1.2 找object链表基址</li>\n<li>1.3 分析结构体找出position偏移</li>\n<li>1.4 找vp变换矩阵基址</li>\n</ul>\n</li>\n<li><p>2 世界到屏幕坐标转换</p>\n<ul>\n<li>读取vp矩阵、读取position</li>\n<li>视图变换</li>\n<li>标准立方体到屏幕</li>\n</ul>\n</li>\n<li><p>3 绘制</p>\n</li>\n</ul>\n<p>（以下地址和偏移均不是真实值）</p>\n<h2 id=\"1-找基址\"><a href=\"#1-找基址\" class=\"headerlink\" title=\"1 找基址\"></a>1 找基址</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>神秘指令：</p>\n<p>// 已删除该部分</p></blockquote>\n<h3 id=\"1-1-找结构体地址\"><a href=\"#1-1-找结构体地址\" class=\"headerlink\" title=\"1.1 找结构体地址\"></a>1.1 找结构体地址</h3><p>猜测生命值是结构体的成员，先找生命值的地址</p>\n<p>用<code>hurtme</code>修改生命值，搜索精确数值，大概有22个结果</p>\n<p>根据访问情况排除：</p>\n<ul>\n<li>只有cmp指令</li>\n<li>server.dll中的指令</li>\n<li>访问次数过少或没有</li>\n<li>没有偏移量的（如<code>mov eax, [esi]</code>）</li>\n<li>类型不符合（如搜整形遇到浮点指令）</li>\n</ul>\n<p>剩下如下可能性较大结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">h1 &#x3D; [0x0C704E00+0x1c]\n(client.dll)\nmov eax, [edi+0x1c]\ncmp eax, -1\n\nh2 &#x3D; [0x0C8345F0+0x18]\n(panorama.dll)\nmov ecx, [ecx+0x18]\ncmp ecx, [eax+0x18]\n\nh3 &#x3D; [0x41AA4248+0xd8]\n(client.dll)\ncall eax\n...\nmov [edi+0xd8], eax\n\nh4 &#x3D; [606F4D60+0x100]\n(client.dll)\nmov eax, [ecx+0x100]\nret\n(client.dll)\ncmp [ecx+0x100], 0</code></pre>\n\n<p>综合来看h4的可能性比较大，即h4的基址可能是结构体地址，生命值的偏移为0x100</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">OBJ\n+0x100: health int</code></pre>\n\n<h3 id=\"1-2-找链表地址\"><a href=\"#1-2-找链表地址\" class=\"headerlink\" title=\"1.2 找链表地址\"></a>1.2 找链表地址</h3><p>搜到4个绿色的地址，保存着结构体地址</p>\n<p>只有一个具有链表的结构</p>\n<p>最终得到如下结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">client.dll+666F75C OBJ_NODE\n+0: 6666BD60 OBJ*\n+4: 666      int\n+8:          OBJ_NODE*\n+C:          OBJ_NODE*</code></pre>\n\n<p>也就是可以通过如下方式获取health：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">DWORD clientBase;\nDWORD pMyObjNode &#x3D; clientBase+0x6666888; &#x2F;&#x2F; OBJ_NODE*\nDWORD pMyObj &#x3D; *(DWORD*)(pobj_node);     &#x2F;&#x2F; OBJ*\nDWORD health &#x3D; *(DWORD*)(pobj+0x66);</code></pre>\n\n<p>遍历链表可以发现，所以物品都在里面，生命值&gt;0的就是玩家或机器人，刚刚好有10个</p>\n<p>下面是遍历的代码：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">typedef struct _OBJ_NODE &#123;\n    void* pObj;\n    int id;\n    void* prev, * next;\n&#125;OBJ_NODE, * POBJ_NODE;\nconstexpr DWORD myObjNodeOff &#x3D; 0x6666888;\nconstexpr DWORD healthOff &#x3D; 0x66;\n\nHANDLE hProc;                &#x2F;&#x2F; get it by yourself\nDWORD clientBase;            &#x2F;&#x2F; get it by yourself\nvoid* pMyObjNode, *pObjNode;\nOBJ_NODE myObjNode, objNode;\nint healthAddr, health;\n\n&#x2F;&#x2F; My Node\nint numHeal &#x3D; 1;\npMyObjNode &#x3D; (void*)(clientBase + myObjNodeOff);\nReadProcessMemory(hProc, (LPVOID)pMyObjNode, &amp;myObjNode, sizeof(OBJ_NODE), NULL);\nhealthAddr &#x3D; (DWORD)myObjNode.pObj + healthOff;\nReadProcessMemory(hProc, (LPVOID)healthAddr, &amp;health, 4, NULL);\n&#x2F;&#x2F; Prev\nfor (pObjNode &#x3D; myObjNode.prev; pObjNode; pObjNode &#x3D; objNode.prev) &#123;\n    ReadProcessMemory(hProc, (LPVOID)pObjNode, &amp;objNode, sizeof(OBJ_NODE), NULL);\n    healthAddr &#x3D; (DWORD)objNode.pObj + healthOff;\n    ReadProcessMemory(hProc, (LPVOID)healthAddr, &amp;health, 4, NULL);\n    if (health &gt; 0) numHeal++;\n&#125;\n&#x2F;&#x2F; Next\nfor (pObjNode &#x3D; myObjNode.next; pObjNode; pObjNode &#x3D; objNode.next) &#123;\n    ReadProcessMemory(hProc, (LPVOID)pObjNode, &amp;objNode, sizeof(OBJ_NODE), NULL);\n    healthAddr &#x3D; (DWORD)objNode.pObj + healthOff;\n    ReadProcessMemory(hProc, (LPVOID)healthAddr, &amp;health, 4, NULL);\n    if (health &gt; 0) numHeal++;\n&#125;\n\nprintf_s(&quot;\\nnumHeal:%d\\n&quot;, numHeal);\n&#x2F;&#x2F; &gt;numHeal:10</code></pre>\n\n<h3 id=\"1-3-找出position偏移\"><a href=\"#1-3-找出position偏移\" class=\"headerlink\" title=\"1.3 找出position偏移\"></a>1.3 找出position偏移</h3><p>查看结构体内存，显示类型选择单浮点，当跳的时候只有z轴是变的，根据此找坐标的位置</p>\n<p>观察内存数值的变化得到下面的信息</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">OBJ\n+64  加速度 float[3]\n+60  坐标   float[3]\n+6C  坐标   float[3]\n+88 坐标   float[3]</code></pre>\n\n<h3 id=\"1-4-找vp变换矩阵基址\"><a href=\"#1-4-找vp变换矩阵基址\" class=\"headerlink\" title=\"1.4 找vp变换矩阵基址\"></a>1.4 找vp变换矩阵基址</h3><p>搜索单精度浮点</p>\n<p>先移动视角，然后搜索变换的值，再移动位置，搜索未改变的值，重复以上步骤</p>\n<h2 id=\"2-世界到屏幕坐标转换\"><a href=\"#2-世界到屏幕坐标转换\" class=\"headerlink\" title=\"2 世界到屏幕坐标转换\"></a>2 世界到屏幕坐标转换</h2><p>世界坐标系到屏幕坐标系的转换有2步，这里简述一下（具体实现根据引擎会有细微差别）（大量括号警告：CG有些名词中文翻译不一致，标上英语）：</p>\n<ul>\n<li><p>第一步是mvp转换：<br>m（model trans.）指模型坐标转世界坐标<br>v（view trans.）指世界坐标转摄像机（摄像机为原点）坐标<br>p（projection trans.）指投影转换，分为正交投影（Orthographic proj.)和透视投影（Perspective proj.），且会将结果归一化（正交投影就是归一化、而透视投影是透视变换+归一化）<br>前面我们得到的是世界坐标和vp矩阵，所以不存在模型坐标向世界坐标转换的步骤（opengl给的就是vp矩阵）</p>\n</li>\n<li><p>第1.5步是归一化（规范化？）：</p>\n<p>（这一步opengl叫透视除法，perspective divide）<br>上面说到投影转换最后会归一化，但在opengl的透视投影转换的透视转换这一过程中，没有维持w为1<br>这一步就是除以那个w，因为用的是齐次坐标，点坐标的w应该为1</p>\n</li>\n<li><p>第二步是视口变换（viewport mapping）：<br>这一步的目标是将坐标转换成屏幕上的坐标<br>需要注意处理原点误差的问题</p>\n</li>\n</ul>\n<p>opengl中把第一步结果的坐标系称为裁剪坐标系（Clip space）<br>第1.5步结果的坐标系称为规范化设备坐标系（NDC，Normalized Device Coord. space）<br>第二步结果的坐标系称为屏幕坐标（Screen space）</p>\n<p>opengl中我认为易错的两点其一是第1.5步的维持点坐标w为1</p>\n<p>其二是第二步视口转换中要处理原点误差</p>\n<p>为了方便这里就不写矩阵了，对于x，原公式是<code>screen.x = ndc.x * (w/2) + (w/2) + x </code>，那个x是屏幕原点坐标，应该为0。<br>网上有些代码会写成<code>screen.x = ndc.x * (w/2) + (w/2) + ndc.x</code><br>因为归一化，ndc.x小于1，所以对结果没有太大影响，问题就被忽略了</p>\n<h2 id=\"3-绘制\"><a href=\"#3-绘制\" class=\"headerlink\" title=\"3 绘制\"></a>3 绘制</h2><p>这里我用的是外部绘制，用的imgui，最好是静态编译（需要先安装dx sdk，才有静态的dx.lib）</p>\n<p>内部绘制的话hook dx的api即可</p>\n<p>透明窗口的创建如下：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#123;\t\n\tint width &#x3D; 1920;\n    int height &#x3D; 1080;\n\n\tWNDCLASSEX wc &#x3D; &#123; sizeof(WNDCLASSEX), CS_CLASSDC, WndProc, 0L, 0L, GetModuleHandle(NULL), NULL, NULL, NULL, NULL, _T(&quot;Diana&quot;), NULL &#125;;\n    RegisterClassEx(&amp;wc);\n    HWND hwnd &#x3D; ::CreateWindow(wc.lpszClassName, _T(&quot;DianaLookAtYou&quot;), WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_CHILD | WS_POPUP | WS_POPUP | WS_EX_TOPMOST, 0, 0, width, height, NULL, NULL, wc.hInstance, NULL);\n    LONG nRet &#x3D; ::GetWindowLong(hwnd, GWL_EXSTYLE); nRet &#x3D; nRet | WS_EX_LAYERED; ::SetWindowLong(hwnd, GWL_EXSTYLE, nRet);\n    SetLayeredWindowAttributes(hwnd, RGB(255, 0, 255), (BYTE)200, LWA_ALPHA | LWA_COLORKEY);\n    SetWindowLong(hwnd, GWL_EXSTYLE, GetWindowLong(hwnd, GWL_EXSTYLE) | WS_EX_TRANSPARENT);\n    SetLayeredWindowAttributes(hwnd, RGB(0, 0, 0), 0, LWA_COLORKEY);\n    SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);\n&#125;</code></pre>\n\n","text":"从0开始：某fpsgo简易透视制作摘要 前置知识： 线性代数知识：矩阵的基本运算 图形学知识：齐次坐标，仿射变换，MVP模型 （可选）旋转、四元数与欧拉角（我也不懂） 其他：CE的基本使用、C++、dll编写与注入、IMGUI 一些资源： frk1/hazedumper: up ...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Hack","slug":"Hack","count":1,"path":"api/categories/Hack.json"}],"tags":[{"name":"hack","slug":"hack","count":1,"path":"api/tags/hack.json"},{"name":"fps","slug":"fps","count":1,"path":"api/tags/fps.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8E0%E5%BC%80%E5%A7%8B%EF%BC%9A%E6%9F%90fpsgo%E7%AE%80%E6%98%93%E9%80%8F%E8%A7%86%E5%88%B6%E4%BD%9C\"><span class=\"toc-text\">从0开始：某fpsgo简易透视制作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%89%BE%E5%9F%BA%E5%9D%80\"><span class=\"toc-text\">1 找基址</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%89%BE%E7%BB%93%E6%9E%84%E4%BD%93%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">1.1 找结构体地址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E6%89%BE%E9%93%BE%E8%A1%A8%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">1.2 找链表地址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E6%89%BE%E5%87%BAposition%E5%81%8F%E7%A7%BB\"><span class=\"toc-text\">1.3 找出position偏移</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E6%89%BEvp%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%9F%BA%E5%9D%80\"><span class=\"toc-text\">1.4 找vp变换矩阵基址</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%B8%96%E7%95%8C%E5%88%B0%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">2 世界到屏幕坐标转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%BB%98%E5%88%B6\"><span class=\"toc-text\">3 绘制</span></a></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"《逆向工程实战》1.7练习 反编译windows内核例程","uid":"b18e35184f4ae33a90ef7f51ea6e9e65","slug":"practicalre1-7","date":"2021-11-08T14:07:00.000Z","updated":"2021-12-05T15:04:31.297Z","comments":true,"path":"api/articles/practicalre1-7.json","keywords":null,"cover":null,"text":"《逆向工程实战》1.7 练习 反编译windows内核例程例程选取自win10 x64 21h1 摘要每个例程反编译的知识点如下： KeInitializeDpc：结构体赋值，纯拷贝 KeInitializeApc：结构体赋值，有条件拷贝 ObFastDereferenceObj...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"Windows","slug":"Windows","count":19,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":25,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"},{"name":"antiDebug","slug":"antiDebug","count":2,"path":"api/tags/antiDebug.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《逆向工程实战》实例J","uid":"a1005445484098080c05958ea32d43c1","slug":"practicalreJ","date":"2021-10-22T04:00:00.000Z","updated":"2022-04-13T13:57:09.139Z","comments":true,"path":"api/articles/practicalreJ.json","keywords":null,"cover":null,"text":"《逆向工程实战》实例JDllMain 反编译尽量按汇编反编译结果（没有太多优化）： BOOL DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) &#123; char[8] idtr; unsigne...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Windows","slug":"Windows","count":19,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":25,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}