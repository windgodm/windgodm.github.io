{"title":"hgame21","uid":"bc0ff34ebb27f27dad44c564d61b2fb3","slug":"hgame21","date":"2021-03-17T12:51:25.000Z","updated":"2021-09-28T10:21:44.929Z","comments":true,"path":"api/articles/hgame21.json","keywords":null,"cover":null,"content":"<h1 id=\"web-week1\"><a href=\"#web-week1\" class=\"headerlink\" title=\"web week1\"></a>web week1</h1><h2 id=\"智商检测鸡（150）\"><a href=\"#智商检测鸡（150）\" class=\"headerlink\" title=\"智商检测鸡（150）\"></a>智商检测鸡（150）</h2><p>我用的python requests+beautifulsoup。</p>\n<p>这题是通过cookie当作账号，做出一题就会给出下一个cookie。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nfrom bs4 import BeautifulSoup\nimport requests\n\ngetQ &#x3D; &#39;http:&#x2F;&#x2F;r4u.top:5000&#x2F;api&#x2F;getQuestion&#39;\ngetS &#x3D; &#39;http:&#x2F;&#x2F;r4u.top:5000&#x2F;api&#x2F;getStatus&#39;\nsubmit &#x3D; &#39;http:&#x2F;&#x2F;r4u.top:5000&#x2F;api&#x2F;verify&#39;\ngetF &#x3D; &#39;http:&#x2F;&#x2F;r4u.top:5000&#x2F;api&#x2F;getFlag&#39;\n\nres &#x3D; requests.get(url&#x3D;getQ)\nheader &#x3D; &#123;&#39;Cookie&#39;: res.headers[&#39;Set-Cookie&#39;]&#125;\n\ndef f(x):\n    return c&#x2F;2*x*x + d*x\n\nfor i in range(100):\n    # 获取\n    res &#x3D; requests.get(url&#x3D;getQ, headers&#x3D;header)\n    bs &#x3D; BeautifulSoup(res.text, &#39;html.parser&#39;)\n    a &#x3D; int(bs.msubsup.contents[1].mn.text)\n    if(bs.msubsup.contents[1].mo !&#x3D; None):\n        if(bs.msubsup.contents[1].mo.text &#x3D;&#x3D; &#39;-&#39;):\n            a &#x3D; -a\n    b &#x3D; int(bs.msubsup.contents[2].mn.text)\n    if(bs.msubsup.contents[2].mo !&#x3D; None):\n        if(bs.msubsup.contents[2].mo.text &#x3D;&#x3D; &#39;-&#39;):\n            b &#x3D; -b\n    c &#x3D; int(bs.mrow.contents[2].text)\n    d &#x3D; int(bs.mrow.contents[5].text)\n    # 计算\n    ans &#x3D; round(f(b)-f(a), 2)\n    # 返回\n    res2 &#x3D; requests.post(url&#x3D;submit, headers&#x3D;header, json&#x3D;&#123;&#39;answer&#39;:ans&#125;)\n    print(res2.headers[&#39;Set-Cookie&#39;])\n    header &#x3D; &#123;&#39;Cookie&#39;: res2.headers[&#39;Set-Cookie&#39;]&#125;\n    # 检查\n    res &#x3D; requests.get(url&#x3D;getS, headers&#x3D;header)\n    print(res.text)\n\nres &#x3D; requests.get(url&#x3D;getF, headers&#x3D;header)\nprint(res.text)</code></pre>\n\n<h1 id=\"misc-week1\"><a href=\"#misc-week1\" class=\"headerlink\" title=\"misc week1\"></a>misc week1</h1><h2 id=\"Base全家福（50）\"><a href=\"#Base全家福（50）\" class=\"headerlink\" title=\"Base全家福（50）\"></a>Base全家福（50）</h2><p>base64+base32+base16</p>\n<h1 id=\"pwn-week1\"><a href=\"#pwn-week1\" class=\"headerlink\" title=\"pwn week1\"></a>pwn week1</h1><h2 id=\"whitegive（50）\"><a href=\"#whitegive（50）\" class=\"headerlink\" title=\"whitegive（50）\"></a>whitegive（50）</h2><p>if(num == “paSsw0rd”)</p>\n<p>ida中找到if语句中的字符串地址即可。</p>\n<h1 id=\"re-week1\"><a href=\"#re-week1\" class=\"headerlink\" title=\"re week1\"></a>re week1</h1><h2 id=\"apacha（150）\"><a href=\"#apacha（150）\" class=\"headerlink\" title=\"apacha（150）\"></a>apacha（150）</h2><p>一个比较复杂的推理。需要注意的是，变量要用unsigned int。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">unsigned int new_a1[35] &#x3D; &#123;&#125;; &#x2F;&#x2F; dump\nfor (i &#x3D; 6; i &gt;&#x3D; 0; i--) &#123;\n    unsigned int l, r;\n\n    v6 &#x3D; v6s[i];\n    v7 &#x3D; v6 &gt;&gt; 2;\n\n    &#x2F;&#x2F; 最后一个\n    v5 &#x3D; new_a1[a2 - 2];\n    result &#x3D; (v5 * 16) ^ (new_a1[0] &gt;&gt; 3);\n    l &#x3D; (a3[((a2 - 1) ^ (unsigned __int8)v7) &amp; 3] ^ v5) + (new_a1[0] ^ v6);\n    r &#x3D; ((4 * new_a1[0]) ^ (v5 &gt;&gt; 5)) + result;\n    old_a1[a2 - 1] &#x3D; new_a1[a2 - 1] - (l ^ r);\n\n    for (j &#x3D; a2 - 2; j &gt;&#x3D; 0; j--) &#123; &#x2F;&#x2F; j &#x3D; v8\n\n        if (j &gt; 0) &#123;\n            v5 &#x3D; new_a1[j - 1];\n        &#125;\n        else &#123;\n            v5 &#x3D; old_a1[a2 - 1];\n        &#125;\n\n        l &#x3D; ((v5 &gt;&gt; 5) ^ (4 * old_a1[j + 1])) + ((16 * v5) ^ (old_a1[j + 1] &gt;&gt; 3));\n        r &#x3D; (a3[(((unsigned __int8)j ^ (unsigned __int8)v7) &amp; 3)] ^ v5) + ((old_a1[j + 1]) ^ (v6));\n        f &#x3D; l ^ r;\n        old_a1[j] &#x3D; new_a1[j] - f;\n    &#125;\n    for (j &#x3D; 0; j &lt; 35; j++)\n        new_a1[j] &#x3D; old_a1[j];</code></pre>\n\n<h2 id=\"hellowRe（150）\"><a href=\"#hellowRe（150）\" class=\"headerlink\" title=\"hellowRe（150）\"></a>hellowRe（150）</h2><p>一个异或。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [0x97, 0x99, 0x9C, 0x91, 0x9E, 0x81, 0x91, 0x9D, 0x9B, 0x9A, 0x9A,0xAB, 0x81, 0x97, 0x0AE, 0x80, 0x83, 0x8F, 0x94, 0x89, 0x99,0x97, 0x0, 0x0]\n\nb &#x3D; 0xff\nc &#x3D; []\nfor i in range(24):\n    c.append(a[i] ^ b)\n    b -&#x3D; 1</code></pre>\n\n<h2 id=\"pypy（150）\"><a href=\"#pypy（150）\" class=\"headerlink\" title=\"pypy（150）\"></a>pypy（150）</h2><p>python字节码转python代码。一个交换和异或。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from Crypto.Util.number import long_to_bytes\n\nflag &#x3D; 0x30466633346f59213b4139794520572b45514d61583151576638643a\ncipher &#x3D; long_to_bytes(flag)\nlength &#x3D; len(cipher)\n\ndef f(x):\n    cipher &#x3D; list(x)\n    for i in range(length&#x2F;&#x2F;2):\n        cipher[i*2], cipher[2*i+1] &#x3D; cipher[i*2+1], cipher[2*i]\n\n    res &#x3D; []\n    for i in range(length):\n        res.append(cipher[i] ^ i)\n    return bytes(res)\n\ndef re(cipher):\n    res &#x3D; list(cipher)\n    for i in range(length):\n        res[i] ^&#x3D; i\n\n    for i in range(length&#x2F;&#x2F;2):\n        res[i*2], res[2*i+1] &#x3D; res[i*2+1], res[2*i]\n    \n    return bytes(res)\n\nprint(re(flag))</code></pre>\n\n<h1 id=\"re-week2\"><a href=\"#re-week2\" class=\"headerlink\" title=\"re week2\"></a>re week2</h1><h2 id=\"ezApk\"><a href=\"#ezApk\" class=\"headerlink\" title=\"ezApk\"></a>ezApk</h2><p>找到位置后，看不太懂，是aes cbc加密。</p>\n<h2 id=\"helloRe2\"><a href=\"#helloRe2\" class=\"headerlink\" title=\"helloRe2\"></a>helloRe2</h2><h3 id=\"sse2指令\"><a href=\"#sse2指令\" class=\"headerlink\" title=\"sse2指令\"></a>sse2指令</h3><p>sse2指令集是个扩展指令集。cpp中需要include &lt;emmintrin.h&gt;。</p>\n<p>_mm_load_si128：加载128bits值，vs中试了以下相当于把字符串直接转数字。</p>\n<p>_mm_cmpeq_epi8：判断是否相等</p>\n<p>_mm_movemask_epi8：没查</p>\n<h3 id=\"flag1\"><a href=\"#flag1\" class=\"headerlink\" title=\"flag1\"></a>flag1</h3><p>cmp(load(flag1), flag)</p>\n<p>ida中flag = 0x981b02a3a6e5c0b2</p>\n<p>所以flag1(input)是”2b0c5e6a3a20b189”</p>\n<h3 id=\"flag2\"><a href=\"#flag2\" class=\"headerlink\" title=\"flag2\"></a>flag2</h3><p>flag1正确后会异或一次然后重启程序，接着进入输入flag2的分支。</p>\n<p>BCrypt解密没看懂。后面补了AES的CBC和ECB才看懂。</p>\n<h3 id=\"复现主函数及BCrypt-h的使用\"><a href=\"#复现主函数及BCrypt-h的使用\" class=\"headerlink\" title=\"复现主函数及BCrypt.h的使用\"></a>复现主函数及BCrypt.h的使用</h3><p>要先include windows.h再include BCrypt.h</p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers\">https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers</a></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">NTSTATUS BCryptGenerateSymmetricKey(\n  BCRYPT_ALG_HANDLE hAlgorithm,  &#x2F;&#x2F; handle of algorithm\n  BCRYPT_KEY_HANDLE *phKey,      &#x2F;&#x2F; recive handle of key\n  PUCHAR            pbKeyObject, &#x2F;&#x2F; recive key object\n  ULONG             cbKeyObject, &#x2F;&#x2F; sizeof(pbKeyObject)\n  PUCHAR            pbSecret,    &#x2F;&#x2F; pt a key witch to creat key\n  ULONG             cbSecret,    &#x2F;&#x2F; sizeof(pbSecret)\n  ULONG             dwFlags\n);</code></pre>\n\n<p>找到关键的参数如下。c实际上有32位，这里只得到16位，上网找脚本破解。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s &#x3D; [0x32, 0x63, 0x32, 0x60, 0x31, 0x60, 0x30, 0x66, 0x3b, 0x68, 0x38, 0x3b, 0x6e, 0x3c, 0x36, 0x36]\n# 32633260316030663b68383b6e3c3636\niv &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd ,0xe ,0xf]\n# 000102030405060708090a0b0c0d0e0f\nc &#x3D; [0xB7, 0xFE, 0xFE, 0xD9, 7, 0x76, 0x79, 0x65, 0x3F, 0x4E, 0x5F, 0x62, 0xD5, 2, 0xF6, 0x7E]\n# b7fefed9077679653f4e5f62d502f67e\nm &#x3D; &#39;7a4ad6c5671fb313&#39;\nflag &#x3D; &#39;hgame&#123;2b0c5e6a3a20b189\n_7a4ad6c5671fb313&#125;&#39;</code></pre>\n\n<p>复现了一下他的代码。这里解密失败了，不知道是什么原因。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">BCRYPT_HANDLE name;\nDWORD objLen &#x3D; 0, blockLength &#x3D; 0;\nunsigned long btw &#x3D; 0, nts &#x3D; 0;\nwchar_t mode[16] &#x3D; L&quot;ChainingModeCBC&quot;;\nBCRYPT_KEY_HANDLE hKey;\nUCHAR pKey[618] &#x3D; &#123; 0 &#125;, pbSecret[16] &#x3D; &#123; 0x32, 0x63, 0x32, 0x60, 0x31, 0x60, 0x30, 0x66, 0x3b, 0x68, 0x38, 0x3b, 0x6e, 0x3c, 0x36, 0x36 &#125;, pKeyBLOB[560] &#x3D; &#123; 0 &#125;;\nUCHAR pIV[16] &#x3D; &#123; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf &#125;;\n\nname &#x3D; 0;\n\n__try &#123;\n    &#x2F;&#x2F; 初始化\n    nts &#x3D; BCryptOpenAlgorithmProvider(&amp;name, L&quot;AES&quot;, 0, 0);\n    if ((nts &lt; 0) || name &#x3D;&#x3D; 0) &#123;\n        cout &lt;&lt; nts &lt;&lt; endl;\n        __leave;\n    &#125;\n\n    &#x2F;&#x2F; 获取属性值\n    nts &#x3D; BCryptGetProperty(name, L&quot;ObjectLength&quot;, (PUCHAR)&amp;objLen, 4, &amp;btw, 0);\n    cout &lt;&lt; &quot;ObjectLength(&quot; &lt;&lt; btw &lt;&lt; &quot;): &quot; &lt;&lt; objLen &lt;&lt; endl; &#x2F;&#x2F; 618\n\n    nts &#x3D; BCryptGetProperty(name, L&quot;BlockLength&quot;, (PUCHAR)&amp;blockLength, 4, &amp;btw, 0);\n    cout &lt;&lt; &quot;BlockLength(&quot; &lt;&lt; btw &lt;&lt; &quot;): &quot; &lt;&lt; blockLength &lt;&lt; endl; &#x2F;&#x2F; 16\n\n    if (blockLength &lt;&#x3D; 16) &#123;\n        &#x2F;&#x2F; 设置模式为CBC\n        nts &#x3D; BCryptSetProperty(name, L&quot;ChainingMode&quot;, (PUCHAR)mode, 0x20, 0);\n\n        &#x2F;&#x2F; 生成密钥对象\n        nts &#x3D; BCryptGenerateSymmetricKey(name, &amp;hKey, pKey, objLen, pbSecret, 16, 0);\n\n        &#x2F;&#x2F; 获取key BLOB长度\n        &#x2F;nts &#x3D; BCryptExportKey(hKey, 0, L&quot;OpaqueKeyBlob&quot;, 0, 0, &amp;btw, 0);\n        cout &lt;&lt; &quot;keyBLOBLen: &quot; &lt;&lt; btw &lt;&lt; endl; &#x2F;&#x2F; 560\n        &#x2F;&#x2F; 接收key BLOB\n        nts &#x3D; BCryptExportKey(hKey, 0, L&quot;OpaqueKeyBlob&quot;, pKeyBLOB, 560, &amp;btw, 0);\n\n        &#x2F;&#x2F; 获取密文长度\n        nts &#x3D; BCryptEncrypt(hKey, inputs, 16, 0, pIV, 16, 0, 0, &amp;btw, BCRYPT_BLOCK_PADDING);\n        cout &lt;&lt; &quot;ciphertextLen: &quot; &lt;&lt; btw &lt;&lt; endl; &#x2F;&#x2F; 32\n        &#x2F;&#x2F; 加密\n        nts &#x3D; BCryptEncrypt(hKey, inputs, 16, 0, pIV, 16, c, 32, &amp;btw, BCRYPT_BLOCK_PADDING);\n\n        &#x2F;&#x2F; 解密\n        nts &#x3D; BCryptDecrypt(hKey, c, 32, 0, pIV, 16, m, 16, &amp;btw, BCRYPT_BLOCK_PADDING);\n        cout &lt;&lt; btw &lt;&lt; endl;\n        cout &lt;&lt; m &lt;&lt; endl;\n    &#125;\n&#125;\n__finally &#123;\n\n&#125;</code></pre>\n\n","text":"web week1智商检测鸡（150）我用的python requests+beautifulsoup。 这题是通过cookie当作账号，做出一题就会给出下一个cookie。 import requests from bs4 import BeautifulSoup import...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"CTF","slug":"CTF","count":8,"path":"api/categories/CTF.json"}],"tags":[{"name":"ctf","slug":"ctf","count":8,"path":"api/tags/ctf.json"},{"name":"re","slug":"re","count":12,"path":"api/tags/re.json"},{"name":"pwn","slug":"pwn","count":2,"path":"api/tags/pwn.json"},{"name":"misc","slug":"misc","count":2,"path":"api/tags/misc.json"},{"name":"wp","slug":"wp","count":7,"path":"api/tags/wp.json"},{"name":"web","slug":"web","count":1,"path":"api/tags/web.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#web-week1\"><span class=\"toc-text\">web week1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%99%BA%E5%95%86%E6%A3%80%E6%B5%8B%E9%B8%A1%EF%BC%88150%EF%BC%89\"><span class=\"toc-text\">智商检测鸡（150）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#misc-week1\"><span class=\"toc-text\">misc week1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Base%E5%85%A8%E5%AE%B6%E7%A6%8F%EF%BC%8850%EF%BC%89\"><span class=\"toc-text\">Base全家福（50）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pwn-week1\"><span class=\"toc-text\">pwn week1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#whitegive%EF%BC%8850%EF%BC%89\"><span class=\"toc-text\">whitegive（50）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#re-week1\"><span class=\"toc-text\">re week1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#apacha%EF%BC%88150%EF%BC%89\"><span class=\"toc-text\">apacha（150）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hellowRe%EF%BC%88150%EF%BC%89\"><span class=\"toc-text\">hellowRe（150）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pypy%EF%BC%88150%EF%BC%89\"><span class=\"toc-text\">pypy（150）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#re-week2\"><span class=\"toc-text\">re week2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ezApk\"><span class=\"toc-text\">ezApk</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#helloRe2\"><span class=\"toc-text\">helloRe2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sse2%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">sse2指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flag1\"><span class=\"toc-text\">flag1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flag2\"><span class=\"toc-text\">flag2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E7%8E%B0%E4%B8%BB%E5%87%BD%E6%95%B0%E5%8F%8ABCrypt-h%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">复现主函数及BCrypt.h的使用</span></a></li></ol></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"反射式dll注入源码笔记","uid":"672d33a00ecfe140728287608f94a579","slug":"reflectiveDllInjection","date":"2021-04-11T10:31:55.000Z","updated":"2021-09-28T10:21:56.361Z","comments":true,"path":"api/articles/reflectiveDllInjection.json","keywords":null,"cover":[],"text":"从反射注入学习pe文件加载前言？后记与总结这是我写完代码后写的总结。重新梳理一下反射注入到底想干什么、以及怎么干。以及从中学到了什么。 收获？目标？反射注入是什么首先是学习反射注入的收获，当然也可以作为学习的目标，同时也是反射注入实际做的东西。 我的理解是反射注入实际上就是手工加...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"dll","slug":"dll","count":4,"path":"api/tags/dll.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"vnctf21ReWp","uid":"7b6a6ddcdac946174aca4612b4f02cc3","slug":"vnctf21ReWp","date":"2021-03-17T11:03:13.000Z","updated":"2021-09-28T10:21:53.194Z","comments":true,"path":"api/articles/vnctf21ReWp.json","keywords":null,"cover":null,"text":"notsudoku这题是python打包的exe 首先用pyinstxtractor解包 .\\pyinstxtractor.py:86: DeprecationWarning: the imp module is deprecated in favour of importlib...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"CTF","slug":"CTF","count":8,"path":"api/categories/CTF.json"}],"tags":[{"name":"ctf","slug":"ctf","count":8,"path":"api/tags/ctf.json"},{"name":"re","slug":"re","count":12,"path":"api/tags/re.json"},{"name":"wp","slug":"wp","count":7,"path":"api/tags/wp.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}