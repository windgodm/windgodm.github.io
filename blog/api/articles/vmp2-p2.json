{"title":"vmp2 (2) 初步分析handler(BeaEngine)","uid":"74105a35f31797dc18272c05740bf85c","slug":"vmp2-p2","date":"2021-09-15T04:00:00.000Z","updated":"2021-09-28T10:29:30.457Z","comments":true,"path":"api/articles/vmp2-p2.json","keywords":null,"cover":null,"content":"<h1 id=\"VMP2（2）初步分析handler-BeaEngine\"><a href=\"#VMP2（2）初步分析handler-BeaEngine\" class=\"headerlink\" title=\"VMP2（2）初步分析handler(BeaEngine)\"></a>VMP2（2）初步分析handler(BeaEngine)</h1><h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>基于手动初步分析的基础，了解了vmp2的结构以及handler表及解密方式。<br>现在写些工具用于辅助分析。</p>\n<p>流程为：</p>\n<ul>\n<li>获取handler RVA</li>\n<li>分析跳转并dump handler</li>\n</ul>\n<p>由subs1(*top = top2)这类涉及栈的一字节操作handler可知vmp栈是两字节对齐。</p>\n<p>dump handler的目的是为了方便分析，具体原因见“条件与无条件jmp”。</p>\n<p>有一个handler存在循环，在自动分析中导致了栈溢出，无法dump出来（需要检查是否重复解析同一地址才能正确dump）。</p>\n<h2 id=\"获取handler的RVA\"><a href=\"#获取handler的RVA\" class=\"headerlink\" title=\"获取handler的RVA\"></a>获取handler的RVA</h2><h3 id=\"获取handler表\"><a href=\"#获取handler表\" class=\"headerlink\" title=\"获取handler表\"></a>获取handler表</h3><p>根据手动调试的结果，可以得到handler表的va，计算出rva，再转换成fa即可通过读取文件获取handler表。</p>\n<p>rva转fa解析pe头的section header即可，这里不做絮述。</p>\n<h3 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">UINT64 handlers[256];\nUINT64 imageBase &#x3D; 0x140000000;\nfor (int i &#x3D; 0; i &lt; 256; i++) &#123;\n    &#x2F;&#x2F; ror 5\n    handlers[i] &#x3D; (handlers[i] &gt;&gt; 5) | ((handlers[i] &amp; 31) &lt;&lt; 59);\n    &#x2F;&#x2F; get rva\n    handlers[i] -&#x3D; imageBase;\n&#125;</code></pre>\n\n<p>vmp2默认 Image Base 是0x140000000。</p>\n<h2 id=\"BeaEngine\"><a href=\"#BeaEngine\" class=\"headerlink\" title=\"BeaEngine\"></a>BeaEngine</h2><p>BeaEngine是一个反汇编引擎，可以辅助分析。</p>\n<p>这里给出一个大概的框架，用于辅助分析handler中的跳转，以及折叠jmp和部分意义不大的jmp。<br>具体可以查看官网文档。</p>\n<p>通过下述代码可以遍历handler，然后可以输出为文本（<code>infos.VirtualAddr</code>,<code>infos.CompleteInstr</code>），借助vsc、md等文本工具分析汇编代码。<br>其中vsc有一个提供asm高亮的插件<code>x86 and x86_64 Assembly</code>。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void DisasmCode(char* stBuf, UINT64 stVA, UINT64 edVA)\n&#123;\n    DISASM infos;\n\tPDISASM prevInfos &#x3D; new DISASM();\n\tPDISASM prev2Infos &#x3D; new DISASM();\n\tPDISASM tpInfos;\n\tint len;\n\tUINT64 curVA, nextVA;\n\tint isJmp; &#x2F;&#x2F; -1: undefine, 0: false, 1: true\n    \n    BYTE cmp_rbp_rax[3] &#x3D; &#123; 0x48, 0x39, 0xC5 &#125;;\n    \n    while (infos.Error &#x3D;&#x3D; 0) &#123;\n\t\tcurVA &#x3D; infos.VirtualAddr;\n\t\tif (curVA &#x3D;&#x3D; edVA) break;\n\t\t&#x2F;&#x2F; disasm\n\t\tlen &#x3D; Disasm(&amp;infos);\n\t\tcout &lt;&lt; curVA &lt;&lt; &quot; &quot; &lt;&lt; infos.CompleteInstr &lt;&lt; endl;\n\n\t\t&#x2F;&#x2F; jmp\n\t\tif (infos.Instruction.BranchType &#x3D;&#x3D; JmpType) &#123;\n\t\t\tJmp(infos);\n\t\t\tcontinue;\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; ret\n\t\tif (infos.Instruction.BranchType &#x3D;&#x3D; RetType) &#123;\n\t\t\tbreak;\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; call\n\t\tif (infos.Instruction.BranchType &#x3D;&#x3D; CallType) &#123;\n\t\t\t&#x2F;&#x2F; next\n\t\t\tinfos.EIP +&#x3D; len;\n\t\t\tinfos.VirtualAddr +&#x3D; len;\n\t\t\tcontinue;\n\t\t&#125;\n\n\t\t&#x2F;&#x2F; Not branch instruction\n\t\tif (infos.Instruction.BranchType &#x3D;&#x3D; 0) &#123;\n\t\t\t&#x2F;&#x2F; save\n\t\t\ttpInfos &#x3D; prevInfos;\n\t\t\tprevInfos &#x3D; prev2Infos;\n\t\t\tprev2Infos &#x3D; tpInfos;\n\t\t\tmemcpy(prevInfos, &amp;infos, sizeof(DISASM));\n\n\t\t\t&#x2F;&#x2F; next\n\t\t\tinfos.EIP +&#x3D; len;\n\t\t\tinfos.VirtualAddr +&#x3D; len;\n\n\t\t\tcontinue;\n\t\t&#125;\n\t\t\n\t\tisJmp &#x3D; -1;\n\t\tif(infos.Instruction.BranchType &#x3D;&#x3D; JA)&#123;\n            &#x2F;&#x2F; 此处下断点即可检查所有JA语句\n\t\t\tif (memcmp((void*)prevInfos-&gt;EIP, cmp_rbp_rax, 3) &#x3D;&#x3D; 0) &#123;\n\t\t\t\t&#x2F;&#x2F; cmp rbp, rax : 48 39 c5\n\t\t\t\t&#x2F;&#x2F; 48: REX.W\n\t\t\t\t&#x2F;&#x2F; 39: cmp Ev, Gv\n\t\t\t\t&#x2F;&#x2F; c5: Ev &#x3D; bp, Gv &#x3D; ax\n\t\t\t\tisJmp &#x3D; 1;\n\t\t\t&#125;\n\t\t&#125;else&#123;\n            &#x2F;&#x2F; 此处下断点即可检查漏掉的跳转语句\n        &#125;\n\n\t\tif (isJmp &#x3D;&#x3D; 1) &#123;\n\t\t\tJmp(infos);\n\t\t&#125;\n\t\telse if(isJmp &#x3D;&#x3D; 0)&#123;\n\t\t\t&#x2F;&#x2F; next\n\t\t\tinfos.EIP +&#x3D; len;\n\t\t\tinfos.VirtualAddr +&#x3D; len;\n\t\t&#125;\n\t\telse &#123;\n\t\t\t&#x2F;&#x2F; false branch\n\t\t\tDisasmCode((char*)(infos.EIP+len), infos.VirtualAddr+len, edVA);\n\t\t\t&#x2F;&#x2F; true branch\n\t\t\tJmp(infos);\n\t\t&#125;\n\t&#125;\n&#125;\n\nint main()\n&#123;\n    unsigned char* fileBuf; &#x2F;&#x2F; 指向被加壳文件的拷贝\n    &#x2F;&#x2F; 读取被加壳文件，此处略过\n    \n    &#x2F;&#x2F; 去重\n    for (int i &#x3D; 0; i &lt; 256; i++) &#123;\n        rva &#x3D; handlers[i];\n        fa &#x3D; RVA2FA(rva); &#x2F;&#x2F; rva-&gt;fa函数略过\n\t\thandler_Rva_Fa[rva] &#x3D; fa;\n\t&#125;\n    \n    unsigned long long getHandlerRVA &#x3D; 0x190438; &#x2F;&#x2F; 这个是获取字节码的那段shellcode\n    unsigned long long enVA +&#x3D; 0x140000000;\n    \n    map&lt;unsigned int, unsigned int&gt;::iterator iter;\n\tfor (iter &#x3D; handler_Rva_Fa.begin(); iter !&#x3D; handler_Rva_Fa.end(); iter++) &#123;\n\t\tchar* buf &#x3D; (char*)((UINT64)fileBuf + (UINT64)iter-&gt;second);\n\t\tunsigned long long va &#x3D; imageBase + (UINT64)iter-&gt;first;\n\n\t\tcout &lt;&lt; &quot;Dis(rva):0x&quot; &lt;&lt; hex &lt;&lt; iter-&gt;first &lt;&lt; endl;\n\t\tif (iter-&gt;first &#x3D;&#x3D; 0x18e53b) &#123; &#x2F;&#x2F; 这个handler有点奇怪的问题，会造成栈溢出，解析不了\n\t\t\tcontinue;\n\t\t&#125;\n\t\tDisasmCode(buf, va, edVA);\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"条件与无条件jmp\"><a href=\"#条件与无条件jmp\" class=\"headerlink\" title=\"条件与无条件jmp\"></a>条件与无条件jmp</h2><p>handler中大量的jmp和有条件跳转，严重影响分析handler的效率。所以需要折叠jmp和一些意义不大的条件jmp，再dump出来方便分析。</p>\n<h2 id=\"ja的所有情况\"><a href=\"#ja的所有情况\" class=\"headerlink\" title=\"ja的所有情况\"></a>ja的所有情况</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>跳转标志位：<strong>CF==0 &amp;&amp; ZF==0</strong></p>\n<p>跳转意义：</p>\n<ul>\n<li>无符号&gt;</li>\n<li>加法无进位（CF=0）</li>\n</ul>\n<p>stc设置cf = 1</p>\n<p>xor设置cf = 0</p>\n<p>运算结果为0 zf = 0</p>\n<h3 id=\"vm栈溢出-检查\"><a href=\"#vm栈溢出-检查\" class=\"headerlink\" title=\"vm栈溢出 检查\"></a>vm栈溢出 检查</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">lea rax, [rdi+0xE0]\ncmp rbp, rax\njmp ImageBase+0x18F29A\nja ImageBase+0x190438 # Jmp if no vmp&#39;s StackOverflow</code></pre>\n\n<p>在push中会有上述代码，没有栈溢出时满足ja，直接跟踪true分支即可。</p>\n<p>分析时检查到前一条非jmp指令为<code>cmp rbp, rax</code>即可直接ja。</p>\n<h3 id=\"vm栈指针-无条件加法-检查\"><a href=\"#vm栈指针-无条件加法-检查\" class=\"headerlink\" title=\"vm栈指针 无条件加法 检查\"></a>vm栈指针 无条件加法 检查</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">add rbp, 0x10\nja ImageBase+0x18cc56 # Jmp if no add overflow</code></pre>\n\n<p>参照概述，直接跟踪true分支即可。</p>\n<p>分析时检查到前一条非jmp指令为<code>add rbp</code> 即可直接ja。</p>\n<h3 id=\"shl\"><a href=\"#shl\" class=\"headerlink\" title=\"shl\"></a>shl</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">shl ax, cl\nja ImageBase+0x18ebef</code></pre>\n\n<p>两条分支一样，可以不做处理。</p>\n<h3 id=\"xor-eax-eax\"><a href=\"#xor-eax-eax\" class=\"headerlink\" title=\"xor eax, eax\"></a>xor eax, eax</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">je # true\nstc # cf &#x3D; 1\nxor eax, eax # cf &#x3D; 0\nja ImageBase+0x18f460</code></pre>\n\n<p><code>xor eax, eax</code>的结果为0，所以zf=1，所以这个ja为false，直接忽略。</p>\n<h3 id=\"其他（未知）\"><a href=\"#其他（未知）\" class=\"headerlink\" title=\"其他（未知）\"></a>其他（未知）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">lea rdx, [8682618a + rax*2]\nja</code></pre>\n\n<p>前面有个xor是的cf=0，没有找到影响zf的语句，直接忽略。</p>\n<h2 id=\"jl的所有情况\"><a href=\"#jl的所有情况\" class=\"headerlink\" title=\"jl的所有情况\"></a>jl的所有情况</h2><h3 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>跳转标志位：<strong>SF != OF</strong></p>\n<p>跳转意义：</p>\n<ul>\n<li>有符号&lt;</li>\n</ul>\n<h3 id=\"signed-bh-lt-0xf9（可疑）\"><a href=\"#signed-bh-lt-0xf9（可疑）\" class=\"headerlink\" title=\"signed: bh &lt; 0xf9（可疑）\"></a>signed: bh &lt; 0xf9（可疑）</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">cmp bh, 0xf9\nstc # cf &#x3D; 1\njl</code></pre>\n\n<p>这个jl就是 if(bh &lt; -7) 或者说 0x7f &lt; bh &lt; 0xf9，不知道想干嘛，在调试中发现bh一般为f4，这里当成true。</p>\n<h3 id=\"NOR\"><a href=\"#NOR\" class=\"headerlink\" title=\"NOR\"></a>NOR</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">and rax, rdxjl</code></pre>\n\n<p>经观察这是个NOR handle，jl以后的代码和没有jl的是一样的，所以当成什么都无所谓。</p>\n<h3 id=\"Add-rbp\"><a href=\"#Add-rbp\" class=\"headerlink\" title=\"Add rbp\"></a>Add rbp</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">add rbp, 0xajl</code></pre>\n\n<p>这个add最高位是0+0=0，相同，of=0；sf=结果最高位=0。</p>\n<p>所以jl是false。</p>\n<h3 id=\"Sub-rbp\"><a href=\"#Sub-rbp\" class=\"headerlink\" title=\"Sub rbp\"></a>Sub rbp</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">sub rbp, 4jl</code></pre>\n\n<p>同add rbp，这个jl也是false。</p>\n<h2 id=\"部分其余的条件跳转\"><a href=\"#部分其余的条件跳转\" class=\"headerlink\" title=\"部分其余的条件跳转\"></a>部分其余的条件跳转</h2><h3 id=\"JC\"><a href=\"#JC\" class=\"headerlink\" title=\"JC\"></a>JC</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">add dword ptr [rpb+8], eaxjc</code></pre>\n\n<p>两条分支一样，可以不做处理。</p>\n<h3 id=\"JE\"><a href=\"#JE\" class=\"headerlink\" title=\"JE\"></a>JE</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">pushfqje</code></pre>\n\n<p>两条分支一样，可以不做处理。</p>\n<h3 id=\"JG\"><a href=\"#JG\" class=\"headerlink\" title=\"JG\"></a>JG</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">cmp bp, sijg</code></pre>\n\n<p>两条分支一样，可以不做处理。</p>\n<h3 id=\"JNO\"><a href=\"#JNO\" class=\"headerlink\" title=\"JNO\"></a>JNO</h3><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">inc clmov cl, byte ptr [rbp+8]jno</code></pre>\n\n<p>可能循环相关，跟踪两条分支。</p>\n","text":"VMP2（2）初步分析handler(BeaEngine)摘要基于手动初步分析的基础，了解了vmp2的结构以及handler表及解密方式。现在写些工具用于辅助分析。 流程为： 获取handler RVA 分析跳转并dump handler 由subs1(*top = top2)这...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Re","slug":"Re","count":4,"path":"api/categories/Re.json"}],"tags":[{"name":"re","slug":"re","count":12,"path":"api/tags/re.json"},{"name":"vmp2","slug":"vmp2","count":3,"path":"api/tags/vmp2.json"},{"name":"BeaEngine","slug":"BeaEngine","count":2,"path":"api/tags/BeaEngine.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#VMP2%EF%BC%882%EF%BC%89%E5%88%9D%E6%AD%A5%E5%88%86%E6%9E%90handler-BeaEngine\"><span class=\"toc-text\">VMP2（2）初步分析handler(BeaEngine)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96handler%E7%9A%84RVA\"><span class=\"toc-text\">获取handler的RVA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96handler%E8%A1%A8\"><span class=\"toc-text\">获取handler表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E7%A0%81\"><span class=\"toc-text\">解码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BeaEngine\"><span class=\"toc-text\">BeaEngine</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E4%B8%8E%E6%97%A0%E6%9D%A1%E4%BB%B6jmp\"><span class=\"toc-text\">条件与无条件jmp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ja%E7%9A%84%E6%89%80%E6%9C%89%E6%83%85%E5%86%B5\"><span class=\"toc-text\">ja的所有情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vm%E6%A0%88%E6%BA%A2%E5%87%BA-%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">vm栈溢出 检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vm%E6%A0%88%E6%8C%87%E9%92%88-%E6%97%A0%E6%9D%A1%E4%BB%B6%E5%8A%A0%E6%B3%95-%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">vm栈指针 无条件加法 检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shl\"><span class=\"toc-text\">shl</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#xor-eax-eax\"><span class=\"toc-text\">xor eax, eax</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%EF%BC%88%E6%9C%AA%E7%9F%A5%EF%BC%89\"><span class=\"toc-text\">其他（未知）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jl%E7%9A%84%E6%89%80%E6%9C%89%E6%83%85%E5%86%B5\"><span class=\"toc-text\">jl的所有情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0-1\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#signed-bh-lt-0xf9%EF%BC%88%E5%8F%AF%E7%96%91%EF%BC%89\"><span class=\"toc-text\">signed: bh &lt; 0xf9（可疑）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NOR\"><span class=\"toc-text\">NOR</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Add-rbp\"><span class=\"toc-text\">Add rbp</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sub-rbp\"><span class=\"toc-text\">Sub rbp</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E5%88%86%E5%85%B6%E4%BD%99%E7%9A%84%E6%9D%A1%E4%BB%B6%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\">部分其余的条件跳转</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JC\"><span class=\"toc-text\">JC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JE\"><span class=\"toc-text\">JE</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JG\"><span class=\"toc-text\">JG</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JNO\"><span class=\"toc-text\">JNO</span></a></li></ol></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"neo4j与CQL","uid":"ff3b8559df1c08290e25585b94350c6d","slug":"neo4j-CQL","date":"2021-09-20T04:00:00.000Z","updated":"2021-09-28T10:12:41.150Z","comments":true,"path":"api/articles/neo4j-CQL.json","keywords":null,"cover":null,"text":"ne04j与CQL摘要neo4j是个nosql数据库，通过docker安装可以启动一个本地服务器，在浏览器中访问。能画出数据的关系图。通过CQL语言进行操作。 主要用途是构建社会关系、知识图谱这种类型的数据库。自带图形化展示数据的功能。 通过docker安装首先安装docker，...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Database","slug":"Database","count":1,"path":"api/categories/Database.json"}],"tags":[{"name":"Database","slug":"Database","count":2,"path":"api/tags/Database.json"},{"name":"neo4j","slug":"neo4j","count":1,"path":"api/tags/neo4j.json"},{"name":"CQL","slug":"CQL","count":1,"path":"api/tags/CQL.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"vmp2 (1) 初步分析","uid":"168fbfd9ad872dd1d16955f2d30e829c","slug":"vmp2-p1","date":"2021-09-13T04:00:00.000Z","updated":"2021-09-28T10:29:17.779Z","comments":true,"path":"api/articles/vmp2-p1.json","keywords":null,"cover":null,"text":"VMP2（1）初步分析摘要初步分析VMProtect Ultimate v 2.13.5加密后的程序，得出vmp基本结构的总结。 基本信息 版本：VMProtect Ultimate v 2.13.5 vmp代码在tls中。 下面是分析出的一些寄存器在vmp中的作用： 寄存器 描...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Re","slug":"Re","count":4,"path":"api/categories/Re.json"}],"tags":[{"name":"re","slug":"re","count":12,"path":"api/tags/re.json"},{"name":"vmp2","slug":"vmp2","count":3,"path":"api/tags/vmp2.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}