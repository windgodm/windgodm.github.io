{"title":"远程线程注入逆向","uid":"8974ac6b1252ccb40492ca6fb37e2ab1","slug":"dllRemoteInject","date":"2021-03-16T09:08:49.000Z","updated":"2021-09-28T10:21:35.600Z","comments":true,"path":"api/articles/dllRemoteInject.json","keywords":null,"cover":[],"content":"<h1 id=\"远程线程注入逆向\"><a href=\"#远程线程注入逆向\" class=\"headerlink\" title=\"远程线程注入逆向\"></a>远程线程注入逆向</h1><h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><h3 id=\"MSDN中的函数定义\"><a href=\"#MSDN中的函数定义\" class=\"headerlink\" title=\"MSDN中的函数定义\"></a>MSDN中的函数定义</h3><h4 id=\"OpenProcess-processthreadsapi-h\"><a href=\"#OpenProcess-processthreadsapi-h\" class=\"headerlink\" title=\"OpenProcess (processthreadsapi.h)\"></a>OpenProcess (processthreadsapi.h)</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h4><p>HANDLE OpenProcess (<br>    DWORD dwDesiredAccess,<br>    BOOL bInheritHandle,<br>    DWORD dwProcessId);</p>\n<h4 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h4><p>DLL：Kernel32.dll</p></blockquote>\n<h4 id=\"NtOpenProcess-ntddk-h\"><a href=\"#NtOpenProcess-ntddk-h\" class=\"headerlink\" title=\"NtOpenProcess (ntddk.h)\"></a>NtOpenProcess (ntddk.h)</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"Syntax-1\"><a href=\"#Syntax-1\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h4><p>__kernel_entry NTSYSCALLAPI NTSTATUS NtOpenProcess (<br>   PHANDLE ProcessHandle,<br>   ACCESS_MASK DesiredAccess,<br>   POBJECT_ATTRIBUTES ObjectAttributes,<br>   PCLIENT_ID ClientId);</p>\n<h4 id=\"Requirements-1\"><a href=\"#Requirements-1\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h4><p>Header：ntddk.h (include Ntddk.h, Ntifs.h)</p></blockquote>\n<h4 id=\"NtAllocateVirtualMemory-ntifs-h\"><a href=\"#NtAllocateVirtualMemory-ntifs-h\" class=\"headerlink\" title=\"NtAllocateVirtualMemory (ntifs.h)\"></a>NtAllocateVirtualMemory (ntifs.h)</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h4 id=\"Syntax-2\"><a href=\"#Syntax-2\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h4><p>__kernel_entry NTSYSCALLAPI NTSTATUS NtAllocateVirtualMemory(<br>   HANDLE ProcessHandle,<br>   PVOID *BaseAddress,<br>   ULONG_PTR ZeroBits,<br>   PSIZE_T RegionSize,<br>   ULONG AllocationType,<br>   ULONG Protect);</p></blockquote>\n<h3 id=\"第三方网站中的函数定义\"><a href=\"#第三方网站中的函数定义\" class=\"headerlink\" title=\"第三方网站中的函数定义\"></a>第三方网站中的函数定义</h3><h4 id=\"NtWriteVirtualMemory\"><a href=\"#NtWriteVirtualMemory\" class=\"headerlink\" title=\"NtWriteVirtualMemory\"></a>NtWriteVirtualMemory</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>__kernel_entry NTSYSCALLAPI NTSTATUS NtQueryVirtualMemory(<br>   HANDLE ProcessHandle,<br>   PVOID BaseAddress,<br>   MEMORY_INFORMATION_CLASS MemoryInformationClass,<br>   PVOID MemoryInformation,<br>   SIZE_T MemoryInformationLength,<br>   PSIZE_T ReturnLength );</p></blockquote>\n<h3 id=\"结构体定义\"><a href=\"#结构体定义\" class=\"headerlink\" title=\"结构体定义\"></a>结构体定义</h3><h4 id=\"UNICODE-STRING-ntdef-h\"><a href=\"#UNICODE-STRING-ntdef-h\" class=\"headerlink\" title=\"UNICODE_STRING (ntdef.h)\"></a>UNICODE_STRING (ntdef.h)</h4><p>似乎是一种安全的unicode字符串类型，下面是ntdef源码。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F;\n&#x2F;&#x2F; Unicode strings are counted 16-bit character strings. If they are\n&#x2F;&#x2F; NULL terminated, Length does not include trailing NULL.\n&#x2F;&#x2F;\n\ntypedef struct _UNICODE_STRING &#123;\n    USHORT Length;\n    USHORT MaximumLength;\n#ifdef MIDL_PASS\n    [size_is(MaximumLength &#x2F; 2), length_is((Length) &#x2F; 2) ] USHORT * Buffer;\n#else &#x2F;&#x2F; MIDL_PASS\n    _Field_size_bytes_part_opt_(MaximumLength, Length) PWCH   Buffer;\n#endif &#x2F;&#x2F; MIDL_PASS\n&#125; UNICODE_STRING;\ntypedef UNICODE_STRING *PUNICODE_STRING;\ntypedef const UNICODE_STRING *PCUNICODE_STRING;\n&#x2F;&#x2F; end_sdfwdm\n&#x2F;&#x2F; end_wudfwdm</code></pre>\n\n<h4 id=\"OBJECT-ATTRIBUTES-ntdef-h\"><a href=\"#OBJECT-ATTRIBUTES-ntdef-h\" class=\"headerlink\" title=\"OBJECT_ATTRIBUTES (ntdef.h)\"></a>OBJECT_ATTRIBUTES (ntdef.h)</h4><p>下面是ntdef源码。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef struct _OBJECT_ATTRIBUTES &#123;\n    ULONG Length;\n    HANDLE RootDirectory;\n    PUNICODE_STRING ObjectName;\n    ULONG Attributes;\n    PVOID SecurityDescriptor;        &#x2F;&#x2F; Points to type SECURITY_DESCRIPTOR\n    PVOID SecurityQualityOfService;  &#x2F;&#x2F; Points to type SECURITY_QUALITY_OF_SERVICE\n&#125; OBJECT_ATTRIBUTES;\ntypedef OBJECT_ATTRIBUTES *POBJECT_ATTRIBUTES;\ntypedef CONST OBJECT_ATTRIBUTES *PCOBJECT_ATTRIBUTES;</code></pre>\n\n<h4 id=\"CLIENT-ID-MSDN\"><a href=\"#CLIENT-ID-MSDN\" class=\"headerlink\" title=\"CLIENT_ID (MSDN)\"></a>CLIENT_ID (MSDN)</h4><p>MSDN的解释是包括进程和线程的id，下面是MSDN中的定义。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef struct _CLIENT_ID &#123;\n\tHANDLE UniqueProcess;\n\tHANDLE UniqueThread;\n&#125; CLIENT_ID;</code></pre>\n\n<h3 id=\"文件地址\"><a href=\"#文件地址\" class=\"headerlink\" title=\"文件地址\"></a>文件地址</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>C:\\Windows\\System32\\kernel32.dll<br>C:\\Windows\\System32\\KernelBase.dll<br>C:\\Windows\\SysWOW64\\kernel32.dll<br>C:\\Windows\\SysWOW64\\KernelBase.dll<br>C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\um\\windows.h<br>C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\shared\\ntdef.h</p></blockquote>\n<h2 id=\"逆向重写OpenProcess（NtOpenProcess）\"><a href=\"#逆向重写OpenProcess（NtOpenProcess）\" class=\"headerlink\" title=\"逆向重写OpenProcess（NtOpenProcess）\"></a>逆向重写OpenProcess（NtOpenProcess）</h2><h3 id=\"在dll中寻找OpenProcess\"><a href=\"#在dll中寻找OpenProcess\" class=\"headerlink\" title=\"在dll中寻找OpenProcess\"></a>在dll中寻找OpenProcess</h3><p>在本机的System32\\kernel32.dll里没有找到，只找到OpenProcessStub()，这个函数会直接调用OpenProcess。在System32\\KernelBase.dll里找到了OpenProcess，然后用ida f5，改了以下符号名是下面这个样子。</p>\n<p>其中ObjectAttributes.Length这个参数有问题，64位是48，32位是24，msdn里是<code>sizeof(OBJECT_ATTRIBUTES)</code>。</p>\n<p>如果有dalao看到这里肯定发现，system32目录下的是64位的dll，但我原本是想找32位的，很尴尬。</p>\n<h3 id=\"KernelBase\"><a href=\"#KernelBase\" class=\"headerlink\" title=\"KernelBase\"></a>KernelBase</h3><p>MSDN上找到一份关于win7的资料[5]，大概意思是把部分kernel32和advapi32的函数移到了kernelbase里，并称kernelbase为low-level binaries，应该是低权限的意思。目的是为了以后的网络工程开发和减少攻击面。</p>\n<h3 id=\"OpenProcess调用过程（x32）\"><a href=\"#OpenProcess调用过程（x32）\" class=\"headerlink\" title=\"OpenProcess调用过程（x32）\"></a>OpenProcess调用过程（x32）</h3><p>在重写OpenProcess改用NtOpenProcess后（详细见下面重新OpenProcess），我重新跟踪了下调用OpenProcess的过程。</p>\n<p><img src=\"https://s3.ax1x.com/2021/03/16/6y9jbj.png\" alt=\"op32\"></p>\n<p>首先main函数call OpenProcess，跳转到kernel.dll；然后jmp到kernelbase.dll；在kernelbase.dll里才是OpenProcess的主要代码，其中会调用ntdll的NtOpenProcess；而NtOpenProcess会调用系统调用。</p>\n<h3 id=\"OpenProcess调用过程（x64）\"><a href=\"#OpenProcess调用过程（x64）\" class=\"headerlink\" title=\"OpenProcess调用过程（x64）\"></a>OpenProcess调用过程（x64）</h3><p>64位和32差不多，先是main call OpenProcess跳转到kernel.dll；然后jmp到kernelbase.dll；kernelbase.dll里是主要代码，不同点是ObjectAttributes.Length的值，以及32位调用的NtOpenProcess，在64中改成了ntdll的ZwOpenProcess；而ZwOpenProcess同样调用了系统调用。</p>\n<p><img src=\"https://s3.ax1x.com/2021/03/16/6yCuPx.png\" alt=\"op64\"></p>\n<h3 id=\"重写OpenProcess（NtOpenProcess）\"><a href=\"#重写OpenProcess（NtOpenProcess）\" class=\"headerlink\" title=\"重写OpenProcess（NtOpenProcess）\"></a>重写OpenProcess（NtOpenProcess）</h3><p>直接引用ntdef.h会引发下面的错误：</p>\n<p>error C2338: Windows headers require the default packing option. Changing this can lead to memory corruption. This diagnostic can be disabled by building with WINDOWS_IGNORE_PACKING_MISMATCH defined.</p>\n<p>最终代替OpenProcess的代码如下：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef struct _UNICODE_STRING &#123;\n\tUSHORT Length;\n\tUSHORT MaximumLength;\n\tPWSTR  Buffer;\n&#125;UNICODE_STRING, *PUNICODE_STRING;\n\ntypedef struct _OBJECT_ATTRIBUTES &#123;\n\tULONG Length;\n\tHANDLE RootDirectory;\n\tPUNICODE_STRING ObjectName;\n\tULONG Attributes;\n\tPVOID SecurityDescriptor;\n\tPVOID SecurityQualityOfService;\n&#125;OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;\n\ntypedef struct _CLIENT_ID &#123;\n\tHANDLE UniqueProcess;\n\tHANDLE UniqueThread;\n&#125;CLIENT_ID, *PCLIENT_ID;\n\ntypedef long (WINAPI* PNtOpenProcess) (\n\tPHANDLE ProcessHandle,\n\tACCESS_MASK DesiredAccess,\n\tPOBJECT_ATTRIBUTES ObjectAttributes,\n\tPCLIENT_ID ClientId\n);\n\n&#x2F;&#x2F; hTarget &#x3D; OpenProcess((PROCESS_CREATE_THREAD | PROCESS_VM_WRITE | PROCESS_VM_READ | PROCESS_VM_OPERATION), false, pid);\nHMODULE mdNT &#x3D; GetModuleHandleW(L&quot;ntdll.dll&quot;);\nPNtOpenProcess NtOpenProcess &#x3D; (PNtOpenProcess)GetProcAddress(mdNT, &quot;NtOpenProcess&quot;);\nOBJECT_ATTRIBUTES ObjectAttributes &#x3D; &#123; sizeof(OBJECT_ATTRIBUTES) &#125;; &#x2F;&#x2F; 0x18\nCLIENT_ID ClientId &#x3D; &#123; (HANDLE)pid, 0 &#125;;\nDWORD nts &#x3D; NtOpenProcess(&amp;hTarget, (PROCESS_CREATE_THREAD | PROCESS_VM_WRITE | PROCESS_VM_READ | PROCESS_VM_OPERATION), &amp;ObjectAttributes, &amp;ClientId);</code></pre>\n\n<p>其中ObjectAttributes.Length我一开始照抄48（后面才发现，照抄的是64位版本的openprocess。），然后NtOpenProcess给我返回了0xC000000D，MSDN中的说明是传入非法参数，再仔细看Members条目，发现这个参数应该为<code>sizeof(OBJECT_ATTRIBUTES)</code>，vs中调试发现这个结构体的长度为24，修改后就能正常用了。原因是32和64的OBJECT_ATTRIBUTES结构长度不一样。</p>\n<h2 id=\"R0和R3通信\"><a href=\"#R0和R3通信\" class=\"headerlink\" title=\"R0和R3通信\"></a>R0和R3通信</h2><p>后面查资料才知道，windwos程序运行在r3（用户态）层；驱动在r1，r2；系统代码在r0（内核态）层。r0权限最高。</p>\n<p>ntdll提供api使得r3层面的程序能够执行r0层的代码。而ntdll的native api都是成对出现的，分别以Nt和Zw开头。</p>\n<h2 id=\"逆向重写VirtualAllocEx（NtAllocateVirtualMemory）\"><a href=\"#逆向重写VirtualAllocEx（NtAllocateVirtualMemory）\" class=\"headerlink\" title=\"逆向重写VirtualAllocEx（NtAllocateVirtualMemory）\"></a>逆向重写VirtualAllocEx（NtAllocateVirtualMemory）</h2><h3 id=\"KernelBase-dll中的VirtualAllocEx\"><a href=\"#KernelBase-dll中的VirtualAllocEx\" class=\"headerlink\" title=\"KernelBase.dll中的VirtualAllocEx\"></a>KernelBase.dll中的VirtualAllocEx</h3><p>VirtualAllocEx会直接调用VirtualAllocExNuma；然后VirtualAllocExNuma调用NtAllocateVirtualMemory。</p>\n<h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef long (WINAPI* PNtAllocateVirtualMemory) (\n\tHANDLE ProcessHandle,\n\tPVOID* BaseAddress,\n\tULONG_PTR ZeroBits,\n\tPSIZE_T RegionSize,\n\tULONG AllocationType,\n\tULONG Protect\n);\n\n&#x2F;&#x2F; pszPathname &#x3D; (PWSTR)VirtualAllocEx(hTarget, NULL, pathnameLen, MEM_COMMIT, PAGE_READWRITE);\nPNtAllocateVirtualMemory NtAllocateVirtualMemory &#x3D; (PNtAllocateVirtualMemory)GetProcAddress(mdNT, &quot;NtAllocateVirtualMemory&quot;);\nnts &#x3D; NtAllocateVirtualMemory(hTarget, (PVOID*)&amp;pszPathname, 0, (SIZE_T*)&amp;pathnameLen, MEM_COMMIT &amp; 0xFFFFFFC0, PAGE_READWRITE);</code></pre>\n\n<h2 id=\"逆向重写WriteProcessMemory（NtWriteVirtualMemory）\"><a href=\"#逆向重写WriteProcessMemory（NtWriteVirtualMemory）\" class=\"headerlink\" title=\"逆向重写WriteProcessMemory（NtWriteVirtualMemory）\"></a>逆向重写WriteProcessMemory（NtWriteVirtualMemory）</h2><h3 id=\"KernelBase-dll中的WriteProcessMemory\"><a href=\"#KernelBase-dll中的WriteProcessMemory\" class=\"headerlink\" title=\"KernelBase.dll中的WriteProcessMemory\"></a>KernelBase.dll中的WriteProcessMemory</h3><p>WriteProcessMemory中调用了NtQueryVirtualMemory，NtProtectVirtualMemory，NtWriteVirtualMemory，NtFlushInstructionCache。后三个在MSDN中似乎都没有资料。</p>\n<p>其中 NtQueryVirtualMemory 用于获取虚拟内存的属性。</p>\n<p>在第三方网站查询得到 NtProtectVirtualMemory[7] 用于改变虚拟内存区域的保护状态。</p>\n<p>关于 NtFlushInstructionCache 的资料没有找到多少，说是用于刷新指令缓存，不知道具体有什么用。</p>\n<p>同样在第三方网站查询得到 NtWriteVirtualMemory[8] 用于写入内存。所以只需要直接调用这个即可。</p>\n<h3 id=\"重写-1\"><a href=\"#重写-1\" class=\"headerlink\" title=\"重写\"></a>重写</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef long(WINAPI* PNtWriteVirtualMemory) (\n\tHANDLE ProcessHandle,\n\tPVOID BaseAddress,\n\tPVOID Buffer,\n\tULONG BufferSize,\n\tPULONG NumberOfBytesWritten\n);\n\n&#x2F;&#x2F; WriteProcessMemory(hTarget, (LPVOID)memoryAddr, buf, bufSize, &amp;byw);\nPNtWriteVirtualMemory NtWriteVirtualMemory &#x3D; (PNtWriteVirtualMemory)GetProcAddress(mdNT, &quot;NtWriteVirtualMemory&quot;);\nNtWriteVirtualMemory(hTarget, memoryAddr, buf, bufSize, &amp;byw);</code></pre>\n\n<h2 id=\"逆向重写LoadLibraryExW（LdrLoadDll）\"><a href=\"#逆向重写LoadLibraryExW（LdrLoadDll）\" class=\"headerlink\" title=\"逆向重写LoadLibraryExW（LdrLoadDll）\"></a>逆向重写LoadLibraryExW（LdrLoadDll）</h2><p>32位下调用过程如下，不管调用哪个版本，最终都会去到LoadLibraryExW。</p>\n<p>LoadLibraryA -&gt; LoadLibraryExA -&gt;LoadLibraryExW，LoadLibraryW -&gt; LoadLibraryExW</p>\n<h3 id=\"KernelBase-dll中的LoadLibraryExW\"><a href=\"#KernelBase-dll中的LoadLibraryExW\" class=\"headerlink\" title=\"KernelBase.dll中的LoadLibraryExW\"></a>KernelBase.dll中的LoadLibraryExW</h3><p>首先通过传入的dwFlags参数确认传入的dll名称是不是unicode编码，不是就设置错误代码为0xC000000D（传入参数非法）。</p>\n<p>然后转换成UNICODE_STRING（RtlInitUnicodeString）。</p>\n<p>转换后会进行检查，去掉unicode字符串末尾的空格。如果全是空格同样会设置错误代码为0xC000000D。</p>\n<p>接着有一段代码会调用 LdrGetDllPath，这段代码如果调用 LoadLibraryW 进入的 LoadLibraryExW 不会触发。</p>\n<p>然后又有一系列从 LoadLibraryW 进入不会触发的if语句。</p>\n<p>最后调用 LdrLoadDll。</p>\n<p>需要注意的是，要选择Release模式，debug模式会出问题，不能正确获得ShellCode地址。</p>\n<h3 id=\"重写-2\"><a href=\"#重写-2\" class=\"headerlink\" title=\"重写\"></a>重写</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">void __declspec(naked) ShellCode(PVOID addr)\n&#123;\n    &#x2F;&#x2F; para 3 UNICODE_STRING pathname\n    &#x2F;&#x2F; [addr+0x0] 2:  USHORT  Length\n    &#x2F;&#x2F; [addr+0x2] 2:  USHORT  MaximumLength\n    &#x2F;&#x2F; [addr+0x4] 4:  PWSTR   Buffer        &#x3D; addr+8\n\n    &#x2F;&#x2F; [addr+0x8] 0x14: wchar_t dllPathname\n\n    &#x2F;&#x2F; para 2\n    &#x2F;&#x2F; [addr+0x98] 4: ULONG LoadFlags &#x3D; 0\n\n    &#x2F;&#x2F; para 4\n    &#x2F;&#x2F; [addr+0x9C] 4: PVOID BaseAddress &#x3D; 0\n\n    &#x2F;&#x2F; [addr+0x100] 4: PVOID LdrLoadDll\n\n    &#x2F;&#x2F; [addr+0x200] : shellcode\n\t__asm &#123;\n\t\tpushad;\n\t\tmov eax, addr;\n\t\t&#x2F;&#x2F; para 4\n\t\tmov ebx, eax;\n\t\tadd ebx, 0x9c;\n\t\tpush ebx;\n\t\t&#x2F;&#x2F; para 3\n\t\tmov ebx, eax;\n\t\tpush ebx;\n\t\t&#x2F;&#x2F; para 2\n\t\tmov ebx, eax;\n\t\tadd ebx, 0x98;\n\t\tpush ebx;\n\t\t&#x2F;&#x2F; para 1\n\t\tmov ebx, 1;\n\t\tpush ebx;\n\t\t&#x2F;&#x2F; call LdrLoadDll\n\t\tadd eax, 0x100;\n\t\tmov edx, [eax];\n\t\tcall edx;\n\t\tpopad;\n\t\tmov eax, addr;\n\t\tadd eax, 0x9C;\n\t\tmov eax, [eax];\n\t\tret;\n\t&#125;\n&#125;</code></pre>\n\n<h4 id=\"写入参数及shellcode\"><a href=\"#写入参数及shellcode\" class=\"headerlink\" title=\"写入参数及shellcode\"></a>写入参数及shellcode</h4><p>这里需要用NtWriteVirtualMemory写入参数及shellcode。</p>\n<p>第三个参数 UNICODE_STRING pathname 我直接选择自己构建，MaximumLength就是dll路径字符串的字节数（包括末尾的零），而Length必须是字符串不包括末尾\\x0\\x0的字节数，否则会LdrLoadDll会找不到dll并返回0xC0000135。</p>\n<h2 id=\"逆向重写CreateRemoteThreadEx（NtCreateThreadEx）\"><a href=\"#逆向重写CreateRemoteThreadEx（NtCreateThreadEx）\" class=\"headerlink\" title=\"逆向重写CreateRemoteThreadEx（NtCreateThreadEx）\"></a>逆向重写CreateRemoteThreadEx（NtCreateThreadEx）</h2><h3 id=\"KernelBase-dll中的CreateRemoteThreadEx\"><a href=\"#KernelBase-dll中的CreateRemoteThreadEx\" class=\"headerlink\" title=\"KernelBase.dll中的CreateRemoteThreadEx\"></a>KernelBase.dll中的CreateRemoteThreadEx</h3><p>CreateRemoteThread会直接调用CreateRemoteThreadEx</p>\n<p>然后CreateRemoteThreadEx会搞一堆奇奇怪怪的检测，并调用NtCreateThreadEx。</p>\n<p>在网上找到定义[9]，照着定义和ida写了下。其中调用了个BaseFormatObjectAttributes，但传了两个零进去发现其实什么也没干。</p>\n<h3 id=\"重写-3\"><a href=\"#重写-3\" class=\"headerlink\" title=\"重写\"></a>重写</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef long(WINAPI* PNtCreateThreadEx) (\n\tPHANDLE hThread,\n\tACCESS_MASK DesiredAccess,\n\tLPVOID ObjectAttributes,\n\tHANDLE ProcessHandle,\n\tLPTHREAD_START_ROUTINE lpStartAddress,\n\tLPVOID lpParameter,\n\tBOOL CreateSuspended,\n\tULONG StackZeroBits,\n\tULONG SizeOfStackCommit,\n\tULONG SizeOfStackReserve,\n\tLPVOID lpBytesBuffer\n);\n\nPNtCreateThreadEx NtCreateThreadEx &#x3D; (PNtCreateThreadEx)GetProcAddress(mdNT, &quot;NtCreateThreadEx&quot;);\nnts &#x3D; NtCreateThreadEx(\n    &amp;hDll,\n    0x1FFFFF,\n    0,\n    hTarget,\n    (LPTHREAD_START_ROUTINE)(pVirtualMemory + 0x200),\n    (PVOID)pVirtualMemory,\n    0,\n    0,\n    0,\n    0,\n    0);</code></pre>\n\n<h2 id=\"用RtlCreateUserThread代替CreateRemoteThread\"><a href=\"#用RtlCreateUserThread代替CreateRemoteThread\" class=\"headerlink\" title=\"用RtlCreateUserThread代替CreateRemoteThread\"></a>用RtlCreateUserThread代替CreateRemoteThread</h2><p>据说RtlCreateUserThread是NtCreateThread的一个小型封装。抄了一下Metasploit的代码[11]。</p>\n<p>Metasploit会先用CraeteRemoteThread，没有足够空间时再使用RtlCreateUserThread。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">typedef long(WINAPI* PRtlCreateUserThread) (\n\tHANDLE ProcessHandle,\n\tPSECURITY_DESCRIPTOR SecurityDescriptor,\n\tBOOLEAN CreateSuspended,\n\tULONG StackZeroBits,\n\tPULONG StackReserved,\n\tPULONG StackCommit,\n\tPVOID StartAddress,\n\tPVOID StartParameter,\n\tPHANDLE ThreadHandle,\n\tPCLIENT_ID ClientID\n);\n\nPRtlCreateUserThread RtlCreateUserThread &#x3D; (PRtlCreateUserThread)GetProcAddress(mdNT, &quot;RtlCreateUserThread&quot;);\nnts &#x3D; RtlCreateUserThread(\n    hTarget,\n    0,\n    0,\n    0,\n    0,\n    0,\n    (LPTHREAD_START_ROUTINE)(pVirtualMemory + 0x200),\n    (PVOID)pVirtualMemory,\n    &amp;hDll,\n    0);</code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] UNICODE_STRING ：<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_unicode_string\">https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_unicode_string</a></p>\n<p>[2] OBJECT_ATTRIBUTES：<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes\">https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes</a></p>\n<p>[3] CLIENT_ID：<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tsts/a11e7129-685b-4535-8d37-21d4596ac057\">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tsts/a11e7129-685b-4535-8d37-21d4596ac057</a></p>\n<p>[4] NtOpenProcess：<a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-ntopenprocess\">https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-ntopenprocess</a></p>\n<p>[5] New Low-Level Binaries（win7）：<a href=\"https://docs.microsoft.com/en-us/windows/win32/win7appqual/new-low-level-binaries\">https://docs.microsoft.com/en-us/windows/win32/win7appqual/new-low-level-binaries</a></p>\n<p>[6] r0和r3之间的通信：<a href=\"https://blog.csdn.net/qq_33526144/article/details/103503011\">https://blog.csdn.net/qq_33526144/article/details/103503011</a></p>\n<p>[7] NtQueryVirtualMemory：<a href=\"http://www.codewarrior.cn/ntdoc/winnt/mm/NtProtectVirtualMemory.htm\">http://www.codewarrior.cn/ntdoc/winnt/mm/NtProtectVirtualMemory.htm</a></p>\n<p>[8] NtWriteProcessMemory：<a href=\"http://www.codewarrior.cn/ntdoc/winnt/mm/NtWriteVirtualMemory.htm\">http://www.codewarrior.cn/ntdoc/winnt/mm/NtWriteVirtualMemory.htm</a></p>\n<p>[9] NtCreateThread：<a href=\"https://securityxploded.com/ntcreatethreadex.php\">https://securityxploded.com/ntcreatethreadex.php</a></p>\n<p>[10] RtlCreateUserThread：<a href=\"https://undocumented.ntinternals.net/index.html?page=UserMode/Undocumented%20Functions/Executable%20Images/RtlCreateUserThread.html\">https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FExecutable%20Images%2FRtlCreateUserThread.html</a></p>\n<p>[11] RtlCreateUserThread Metasploit例子：<a href=\"https://github.com/rapid7/meterpreter/blob/6d43284689240f4261cae44a47f0fb557c1dde27/source/common/arch/win/remote_thread.c#L77\">https://github.com/rapid7/meterpreter/blob/6d43284689240f4261cae44a47f0fb557c1dde27/source/common/arch/win/remote_thread.c#L77</a></p>\n<p>[12] RtlCreateUserThread mimikatz例子：<a href=\"https://github.com/gentilkiwi/mimikatz/blob/d5676aa66cb3f01afc373b0a2f8fcc1a2822fd27/modules/kull_m_remotelib.c#L59\">https://github.com/gentilkiwi/mimikatz/blob/d5676aa66cb3f01afc373b0a2f8fcc1a2822fd27/modules/kull_m_remotelib.c#L59</a></p>\n","text":"远程线程注入逆向资料MSDN中的函数定义OpenProcess (processthreadsapi.h) SyntaxHANDLE OpenProcess ( DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcess...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"dll","slug":"dll","count":4,"path":"api/tags/dll.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5%E9%80%86%E5%90%91\"><span class=\"toc-text\">远程线程注入逆向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%96%99\"><span class=\"toc-text\">资料</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MSDN%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">MSDN中的函数定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#OpenProcess-processthreadsapi-h\"><span class=\"toc-text\">OpenProcess (processthreadsapi.h)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Syntax\"><span class=\"toc-text\">Syntax</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Requirements\"><span class=\"toc-text\">Requirements</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NtOpenProcess-ntddk-h\"><span class=\"toc-text\">NtOpenProcess (ntddk.h)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Syntax-1\"><span class=\"toc-text\">Syntax</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Requirements-1\"><span class=\"toc-text\">Requirements</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NtAllocateVirtualMemory-ntifs-h\"><span class=\"toc-text\">NtAllocateVirtualMemory (ntifs.h)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Syntax-2\"><span class=\"toc-text\">Syntax</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BD%91%E7%AB%99%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">第三方网站中的函数定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NtWriteVirtualMemory\"><span class=\"toc-text\">NtWriteVirtualMemory</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">结构体定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UNICODE-STRING-ntdef-h\"><span class=\"toc-text\">UNICODE_STRING (ntdef.h)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#OBJECT-ATTRIBUTES-ntdef-h\"><span class=\"toc-text\">OBJECT_ATTRIBUTES (ntdef.h)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CLIENT-ID-MSDN\"><span class=\"toc-text\">CLIENT_ID (MSDN)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">文件地址</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91%E9%87%8D%E5%86%99OpenProcess%EF%BC%88NtOpenProcess%EF%BC%89\"><span class=\"toc-text\">逆向重写OpenProcess（NtOpenProcess）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8dll%E4%B8%AD%E5%AF%BB%E6%89%BEOpenProcess\"><span class=\"toc-text\">在dll中寻找OpenProcess</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KernelBase\"><span class=\"toc-text\">KernelBase</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OpenProcess%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%EF%BC%88x32%EF%BC%89\"><span class=\"toc-text\">OpenProcess调用过程（x32）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OpenProcess%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%EF%BC%88x64%EF%BC%89\"><span class=\"toc-text\">OpenProcess调用过程（x64）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99OpenProcess%EF%BC%88NtOpenProcess%EF%BC%89\"><span class=\"toc-text\">重写OpenProcess（NtOpenProcess）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#R0%E5%92%8CR3%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">R0和R3通信</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91%E9%87%8D%E5%86%99VirtualAllocEx%EF%BC%88NtAllocateVirtualMemory%EF%BC%89\"><span class=\"toc-text\">逆向重写VirtualAllocEx（NtAllocateVirtualMemory）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KernelBase-dll%E4%B8%AD%E7%9A%84VirtualAllocEx\"><span class=\"toc-text\">KernelBase.dll中的VirtualAllocEx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99\"><span class=\"toc-text\">重写</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91%E9%87%8D%E5%86%99WriteProcessMemory%EF%BC%88NtWriteVirtualMemory%EF%BC%89\"><span class=\"toc-text\">逆向重写WriteProcessMemory（NtWriteVirtualMemory）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KernelBase-dll%E4%B8%AD%E7%9A%84WriteProcessMemory\"><span class=\"toc-text\">KernelBase.dll中的WriteProcessMemory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99-1\"><span class=\"toc-text\">重写</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91%E9%87%8D%E5%86%99LoadLibraryExW%EF%BC%88LdrLoadDll%EF%BC%89\"><span class=\"toc-text\">逆向重写LoadLibraryExW（LdrLoadDll）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KernelBase-dll%E4%B8%AD%E7%9A%84LoadLibraryExW\"><span class=\"toc-text\">KernelBase.dll中的LoadLibraryExW</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99-2\"><span class=\"toc-text\">重写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%85%A5%E5%8F%82%E6%95%B0%E5%8F%8Ashellcode\"><span class=\"toc-text\">写入参数及shellcode</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91%E9%87%8D%E5%86%99CreateRemoteThreadEx%EF%BC%88NtCreateThreadEx%EF%BC%89\"><span class=\"toc-text\">逆向重写CreateRemoteThreadEx（NtCreateThreadEx）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KernelBase-dll%E4%B8%AD%E7%9A%84CreateRemoteThreadEx\"><span class=\"toc-text\">KernelBase.dll中的CreateRemoteThreadEx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99-3\"><span class=\"toc-text\">重写</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8RtlCreateUserThread%E4%BB%A3%E6%9B%BFCreateRemoteThread\"><span class=\"toc-text\">用RtlCreateUserThread代替CreateRemoteThread</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vnctf21ReWp","uid":"7b6a6ddcdac946174aca4612b4f02cc3","slug":"vnctf21ReWp","date":"2021-03-17T11:03:13.000Z","updated":"2021-09-28T10:21:53.194Z","comments":true,"path":"api/articles/vnctf21ReWp.json","keywords":null,"cover":null,"text":"notsudoku这题是python打包的exe 首先用pyinstxtractor解包 .\\pyinstxtractor.py:86: DeprecationWarning: the imp module is deprecated in favour of importlib...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"CTF","slug":"CTF","count":8,"path":"api/categories/CTF.json"}],"tags":[{"name":"ctf","slug":"ctf","count":8,"path":"api/tags/ctf.json"},{"name":"re","slug":"re","count":12,"path":"api/tags/re.json"},{"name":"wp","slug":"wp","count":7,"path":"api/tags/wp.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"windows核心编程 dll笔记","uid":"c3979005c513d3a7ab25692f156963bc","slug":"winViaC-dll","date":"2021-03-16T08:52:35.000Z","updated":"2021-09-28T10:21:40.977Z","comments":true,"path":"api/articles/winViaC-dll.json","keywords":null,"cover":null,"text":"windows核心编程 dll笔记构建及使用dll以下是核心编程的示例： &#x2F;* .\\Mylib\\MyLib.h *&#x2F; #ifndef MYLIB #define MYLIB extern &quot;C&quot; __declspec(dllimport) ...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"Windows","slug":"Windows","count":21,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":21,"path":"api/tags/windows.json"},{"name":"dll","slug":"dll","count":4,"path":"api/tags/dll.json"},{"name":"note","slug":"note","count":27,"path":"api/tags/note.json"},{"name":"windows_via_c","slug":"windows-via-c","count":1,"path":"api/tags/windows-via-c.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}