{"total":40,"pageSize":12,"pageCount":4,"data":[{"title":"《Windows Kernel Programming》 笔记 1~5 内核开发入门","uid":"2cdcc6b2635425e63dc5ac736f5a68f9","slug":"wkp1-5","date":"2021-12-24T04:00:00.000Z","updated":"2022-01-18T09:30:03.325Z","comments":true,"path":"api/articles/wkp1-5.json","cover":[],"text":"Windows Kernel Programming 笔记 1~5 内核开发入门1 windows内部概况描述一些Windows内部工作中最重要、最基本的概念，部分概念将在后面的章节做更详细的研究 1.1 进程进程不运行（Processes dont’t run - proces...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Windows","slug":"Windows","count":19,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":23,"path":"api/tags/note.json"},{"name":"kernel","slug":"kernel","count":5,"path":"api/tags/kernel.json"},{"name":"wkp","slug":"wkp","count":3,"path":"api/tags/wkp.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"《逆向工程实战》1.7练习 反编译windows内核例程","uid":"b18e35184f4ae33a90ef7f51ea6e9e65","slug":"practicalre1-7","date":"2021-11-08T14:07:00.000Z","updated":"2021-12-05T15:04:31.297Z","comments":true,"path":"api/articles/practicalre1-7.json","cover":null,"text":"《逆向工程实战》1.7 练习 反编译windows内核例程例程选取自win10 x64 21h1 摘要每个例程反编译的知识点如下： KeInitializeDpc：结构体赋值，纯拷贝 KeInitializeApc：结构体赋值，有条件拷贝 ObFastDereferenceObj...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"Windows","slug":"Windows","count":19,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":23,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"},{"name":"antiDebug","slug":"antiDebug","count":2,"path":"api/tags/antiDebug.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"从0开始：某fpsgo简单透视制作","uid":"7081df1a25a0e63a8adb7b11423fb4be","slug":"fpsgoPerspective","date":"2021-11-08T12:54:00.000Z","updated":"2021-12-05T15:10:44.986Z","comments":true,"path":"api/articles/fpsgoPerspective.json","cover":null,"text":"从0开始：某fpsgo简易透视制作摘要 前置知识： 线性代数知识：矩阵的基本运算 图形学知识：齐次坐标，仿射变换，MVP模型 （可选）旋转、四元数与欧拉角（我也不懂） 其他：CE的基本使用、C++、dll编写与注入、IMGUI 一些资源： frk1/hazedumper: up ...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Hack","slug":"Hack","count":1,"path":"api/categories/Hack.json"}],"tags":[{"name":"hack","slug":"hack","count":1,"path":"api/tags/hack.json"},{"name":"fps","slug":"fps","count":1,"path":"api/tags/fps.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"《逆向工程实战》实例J","uid":"a1005445484098080c05958ea32d43c1","slug":"practicalreJ","date":"2021-10-22T04:00:00.000Z","updated":"2022-04-13T13:57:09.139Z","comments":true,"path":"api/articles/practicalreJ.json","cover":null,"text":"《逆向工程实战》实例JDllMain 反编译尽量按汇编反编译结果（没有太多优化）： BOOL DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) &#123; char[8] idtr; unsigne...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Windows","slug":"Windows","count":19,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":23,"path":"api/tags/note.json"},{"name":"practicalre","slug":"practicalre","count":5,"path":"api/tags/practicalre.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"逆向工程核心原理 R3静态反调试 笔记","uid":"2b002dec449ce21e3d8b7af026d74ae7","slug":"recoreR3StaAntiDebug","date":"2021-10-16T04:00:00.000Z","updated":"2021-11-05T11:43:17.496Z","comments":true,"path":"api/articles/recoreR3StaAntiDebug.json","cover":null,"text":"逆向工程核心原理 R3静态反调试 笔记摘要主要是R3层面的静态反调试手段 参考逆向工程核心原理51章静态反调试 涉及的API： IsDebuggerPresent() NtQueryInformationProcess() NtQuerySystemInformation() N...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Windows","slug":"Windows","count":19,"path":"api/categories/Windows.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"note","slug":"note","count":23,"path":"api/tags/note.json"},{"name":"reversecore","slug":"reversecore","count":4,"path":"api/tags/reversecore.json"},{"name":"antiDebug","slug":"antiDebug","count":2,"path":"api/tags/antiDebug.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"pbctf21 btree wp","uid":"37d6e393a967114c82f7d8a550ead81e","slug":"pbctf21-btree-Wp","date":"2021-10-09T04:00:00.000Z","updated":"2021-11-05T11:34:18.434Z","comments":true,"path":"api/articles/pbctf21-btree-Wp.json","cover":null,"text":"PBCTF21 RE BinaryTree Beaengine+dijkstra解法思路代码是动态解密的，简单的xor，解密一块执行一块。每一块结尾会设置rbx，rbx决定下一块被解密的代码。 实际上每一块代码相当于一个节点，里面有一个根据输入的jz，决定下一个rbx以及一个co...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"CTF","slug":"CTF","count":7,"path":"api/categories/CTF.json"}],"tags":[{"name":"ctf","slug":"ctf","count":7,"path":"api/tags/ctf.json"},{"name":"re","slug":"re","count":10,"path":"api/tags/re.json"},{"name":"wp","slug":"wp","count":7,"path":"api/tags/wp.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"vmp2 (3) handler类型总结","uid":"796d9083672966112e1391db00c01e6d","slug":"vmp2-p3","date":"2021-09-28T04:00:00.000Z","updated":"2021-09-28T10:30:30.953Z","comments":true,"path":"api/articles/vmp2-p3.json","cover":null,"text":"VMP2（3）handler类型总结摘要详细分析push、pop、计算类handler以及粗略分析其余handler后对handler进行分类并做一些总结。 字节码vm字节码结构有三种： opcode(1B) opcode(1B) + Imm(1~8B) opcode(1B) +...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Re","slug":"Re","count":3,"path":"api/categories/Re.json"}],"tags":[{"name":"re","slug":"re","count":10,"path":"api/tags/re.json"},{"name":"vmp2","slug":"vmp2","count":3,"path":"api/tags/vmp2.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BeaEngine","uid":"14f57ee55d88ddbbbcf4ab3554ca49cd","slug":"BeaEngine","date":"2021-09-20T04:00:00.000Z","updated":"2021-09-28T10:17:39.992Z","comments":true,"path":"api/articles/BeaEngine.json","cover":null,"text":"BeaEngine摘要一个反汇编引擎，支持c++、python等。 具体使用参照官方github的example，非常详细。 常用char buf; UINT64 va; DISASM infos; int len; &#x2F;&#x2F; init memset(&amp;i...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Programing","slug":"Programing","count":2,"path":"api/categories/Programing.json"}],"tags":[{"name":"Programing","slug":"Programing","count":2,"path":"api/tags/Programing.json"},{"name":"BeaEngine","slug":"BeaEngine","count":2,"path":"api/tags/BeaEngine.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"neo4j与CQL","uid":"ff3b8559df1c08290e25585b94350c6d","slug":"neo4j-CQL","date":"2021-09-20T04:00:00.000Z","updated":"2021-09-28T10:12:41.150Z","comments":true,"path":"api/articles/neo4j-CQL.json","cover":null,"text":"ne04j与CQL摘要neo4j是个nosql数据库，通过docker安装可以启动一个本地服务器，在浏览器中访问。能画出数据的关系图。通过CQL语言进行操作。 主要用途是构建社会关系、知识图谱这种类型的数据库。自带图形化展示数据的功能。 通过docker安装首先安装docker，...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Database","slug":"Database","count":1,"path":"api/categories/Database.json"}],"tags":[{"name":"Database","slug":"Database","count":2,"path":"api/tags/Database.json"},{"name":"neo4j","slug":"neo4j","count":1,"path":"api/tags/neo4j.json"},{"name":"CQL","slug":"CQL","count":1,"path":"api/tags/CQL.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"vmp2 (2) 初步分析handler(BeaEngine)","uid":"74105a35f31797dc18272c05740bf85c","slug":"vmp2-p2","date":"2021-09-15T04:00:00.000Z","updated":"2021-09-28T10:29:30.457Z","comments":true,"path":"api/articles/vmp2-p2.json","cover":null,"text":"VMP2（2）初步分析handler(BeaEngine)摘要基于手动初步分析的基础，了解了vmp2的结构以及handler表及解密方式。现在写些工具用于辅助分析。 流程为： 获取handler RVA 分析跳转并dump handler 由subs1(*top = top2)这...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Re","slug":"Re","count":3,"path":"api/categories/Re.json"}],"tags":[{"name":"re","slug":"re","count":10,"path":"api/tags/re.json"},{"name":"vmp2","slug":"vmp2","count":3,"path":"api/tags/vmp2.json"},{"name":"BeaEngine","slug":"BeaEngine","count":2,"path":"api/tags/BeaEngine.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"vmp2 (1) 初步分析","uid":"168fbfd9ad872dd1d16955f2d30e829c","slug":"vmp2-p1","date":"2021-09-13T04:00:00.000Z","updated":"2021-09-28T10:29:17.779Z","comments":true,"path":"api/articles/vmp2-p1.json","cover":null,"text":"VMP2（1）初步分析摘要初步分析VMProtect Ultimate v 2.13.5加密后的程序，得出vmp基本结构的总结。 基本信息 版本：VMProtect Ultimate v 2.13.5 vmp代码在tls中。 下面是分析出的一些寄存器在vmp中的作用： 寄存器 描...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Re","slug":"Re","count":3,"path":"api/categories/Re.json"}],"tags":[{"name":"re","slug":"re","count":10,"path":"api/tags/re.json"},{"name":"vmp2","slug":"vmp2","count":3,"path":"api/tags/vmp2.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MEMZ彩虹猫分析","uid":"25dfe92efe3817312d385cfe3a16b7f2","slug":"memz","date":"2021-08-13T04:00:00.000Z","updated":"2021-09-28T10:21:28.040Z","comments":true,"path":"api/articles/memz.json","cover":[],"text":"MEMZ彩虹猫分析流程 void start() &#123; &#x2F;&#x2F; 紫色部分 if(arbc &gt; 1) &#123; if(!lstrcmpW(argv[1], L&quot;&#x2F;watchdog&quot;)) &#123; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Virus","slug":"Virus","count":1,"path":"api/categories/Virus.json"}],"tags":[{"name":"windows","slug":"windows","count":19,"path":"api/tags/windows.json"},{"name":"virus","slug":"virus","count":1,"path":"api/tags/virus.json"}],"author":{"name":"御史神风","slug":"御史神风","avatar":"/blog/imgs/child.jpg","link":"/","description":"芜湖~好耶!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}