{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"games101课程主页：https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html 1 CG概况teacher: www.cs.ucsb.edu/~lingqi/ 课程主要内容 Rasterization（光栅化） Curv...","date":"2021-08-11T09:02:22.127Z","updated":"2021-08-11T09:02:22.127Z","comments":true,"path":"api/pages/note/games101Note.json","covers":null,"excerpt":"","content":"<h1 id=\"games101\"><a href=\"#games101\" class=\"headerlink\" title=\"games101\"></a>games101</h1><p>课程主页：<a href=\"https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html\">https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html</a></p>\n<h2 id=\"1-CG概况\"><a href=\"#1-CG概况\" class=\"headerlink\" title=\"1 CG概况\"></a>1 CG概况</h2><p>teacher: <a href=\"http://www.cs.ucsb.edu/~lingqi/\">www.cs.ucsb.edu/~lingqi/</a></p>\n<h3 id=\"课程主要内容\"><a href=\"#课程主要内容\" class=\"headerlink\" title=\"课程主要内容\"></a>课程主要内容</h3><ul>\n<li>Rasterization（光栅化）</li>\n<li>Curves and Meshes（曲线、曲面）</li>\n<li>Ray Tracing（光线追踪）</li>\n<li>Animation / Simulation（动画、模拟）</li>\n</ul>\n<h2 id=\"2-线性代数\"><a href=\"#2-线性代数\" class=\"headerlink\" title=\"2 线性代数\"></a>2 线性代数</h2><h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>主要讲向量、矩阵的一些运算，以及在CG中的应用。</p>\n<p>最后简单讲了下矩阵可用于计算点乘、叉乘。还有简单提到了变换。</p>\n<h3 id=\"向量-点乘-叉乘\"><a href=\"#向量-点乘-叉乘\" class=\"headerlink\" title=\"向量 点乘 叉乘\"></a>向量 点乘 叉乘</h3><p>比如通过点乘计算两个<strong>向量的夹角、相似度、投影、方向正反</strong><br>通过叉乘计算平面上两向量的<strong>相对位置</strong>，以及<strong>判断</strong>点是否在<strong>三角形内</strong></p>\n<h2 id=\"3-变换\"><a href=\"#3-变换\" class=\"headerlink\" title=\"3 变换\"></a>3 变换</h2><h3 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>主要讲通过矩阵运算实现2D的<strong>变换</strong>（仿射变换）：缩放(Scale)、旋转(Rotation)、切变(Shear)。还有<strong>平移</strong>。</p>\n<p>还有通过<strong>齐次坐标</strong>(Homogeneous coordinates)，把变换和平移融入到一个矩阵中。</p>\n<h3 id=\"线性变换\"><a href=\"#线性变换\" class=\"headerlink\" title=\"线性变换\"></a>线性变换</h3><p>我感觉其实就是<strong>线性变换</strong>，就不再详细描述了。公式如下，其中向量i(i_x, i_y)表示新的x轴单位向量在原坐标系中的坐标，向量j同理。<br>$$<br>\\begin{pmatrix}x’\\y’\\end{pmatrix}<br>=<br>\\begin{pmatrix}i_x&amp;j_x\\i_y&amp;j_y\\end{pmatrix}<br>\\cdot<br>\\begin{pmatrix}x\\y\\end{pmatrix}<br>$$<br>基本变换对应的矩阵就不写了。</p>\n<h3 id=\"齐次坐标-与-仿射变换\"><a href=\"#齐次坐标-与-仿射变换\" class=\"headerlink\" title=\"齐次坐标 与 仿射变换\"></a>齐次坐标 与 仿射变换</h3><h4 id=\"齐次坐标\"><a href=\"#齐次坐标\" class=\"headerlink\" title=\"齐次坐标\"></a>齐次坐标</h4><p>引入齐次坐标的目的是让变换和平移都能通过矩阵乘法完成，而不需要加法。更深层次的目的我认为是方便<strong>组合复杂的变换</strong>。</p>\n<p>齐次坐标即对于原本的n维向量，在最后再加一个维度。以2D为例：</p>\n<ul>\n<li>(x, y, w)</li>\n<li>2D point = (x, y, 1)<sup>T</sup></li>\n<li>2D vector = (x, y, 0)<sup>T</sup></li>\n</ul>\n<p>新增 0-1 的意义：</p>\n<ul>\n<li><p>最后新增的维度用于表示该3维向量的<strong>意义</strong>是2维的<strong>点</strong>还是2维的<strong>向量</strong>。</p>\n</li>\n<li><p>代表2维向量时，最后为0使得该3维向量在应用变换时，不会发生平移，很好体现了<strong>向量的平移不变</strong>。</p>\n</li>\n<li><p>如果3维向量<strong>相加</strong>，有如下<strong>特性</strong>（若相加后w不为0，则向量除等于w）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>向量(0) + 向量(0) = 向量(0)</p>\n<p>点B(1) - 点A(1) = 向量AB(0)</p>\n<p>点(1) + 向量(0) = 点(1) </p>\n<p>点(1) + 点(1)  = 中点</p></blockquote>\n</li>\n</ul>\n<h4 id=\"仿射变换\"><a href=\"#仿射变换\" class=\"headerlink\" title=\"仿射变换\"></a>仿射变换</h4><p>对于2维变量的仿射变换公式如下，其中向量t(t_x, t_y)是平移向量。该仿射变换表示先进行线性变换再平移。<br>$$<br>\\begin{pmatrix}x’\\y’\\1\\end{pmatrix}<br>=<br>\\begin{pmatrix}i_x&amp;j_x&amp;t_x\\i_y&amp;j_y&amp;t_x\\0&amp;0&amp;1\\end{pmatrix}<br>\\cdot<br>\\begin{pmatrix}x\\y\\1\\end{pmatrix}<br>$$</p>\n<p>下面是几种基本变换的矩阵</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Scale</strong><br>$$<br>S\\left ( s_x, s_y \\right )<br>=<br>\\begin{pmatrix}s_x&amp;0&amp;0\\0&amp;s_y&amp;0\\0&amp;0&amp;1\\end{pmatrix}<br>$$<br><strong>Rotation</strong><br>$$<br>R\\left ( \\alpha  \\right )<br>=<br>\\begin{pmatrix}<br>\\cos \\alpha &amp; -\\sin \\alpha &amp; 0<br>\\ \\sin \\alpha &amp; \\cos \\alpha &amp; 0<br>\\ 0&amp;0&amp;1<br>\\end{pmatrix}<br>$$<br><strong>Translation</strong><br>$$<br>T\\left ( t_x, t_y \\right )<br>=<br>\\begin{pmatrix}1&amp;0&amp;t_x\\0&amp;1&amp;t_y\\0&amp;0&amp;1\\end{pmatrix}<br>$$</p></blockquote>\n<h4 id=\"组合复杂变换\"><a href=\"#组合复杂变换\" class=\"headerlink\" title=\"组合复杂变换\"></a>组合复杂变换</h4><p>绕c点旋转可表示为：<br>$$<br>T\\left ( \\textbf{c} \\right ) \\cdot R \\left ( \\alpha  \\right ) \\cdot T\\left ( -\\textbf{c} \\right )<br>$$<br>实际运算时根据矩阵乘法的性质，当组合多个变换矩阵时，可以先把这些矩阵乘起来成一个矩阵，再依次对各点操作。也就是可以用一个矩阵表示多个简单的变换。</p>\n<h2 id=\"4-变换2（3d变换与观察变换）\"><a href=\"#4-变换2（3d变换与观察变换）\" class=\"headerlink\" title=\"4 变换2（3d变换与观察变换）\"></a>4 变换2（3d变换与观察变换）</h2><h3 id=\"摘要-2\"><a href=\"#摘要-2\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>先提了一点上节课没讲完的3d变换，主要讲<strong>观测变换（Viewing transformation）</strong>，包括<strong>视图变换</strong>(view trans.)、<strong>投影变换</strong>(Project trans.)。投影变换又分为<strong>正交投影</strong>(Orthographic proj.)和<strong>透视投影</strong>(Perspective proj.)。</p>\n<h3 id=\"3D-旋转变换\"><a href=\"#3D-旋转变换\" class=\"headerlink\" title=\"3D 旋转变换\"></a>3D 旋转变换</h3><p>下面在<strong>右手系</strong>情况下，分别<strong>绕三个坐标轴旋转</strong>的变换矩阵。（绕y轴的比较特殊，与是右手系有关）</p>\n<p>$$<br>R_{x} \\left ( \\alpha  \\right )<br>=<br>\\begin{pmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; \\cos \\alpha &amp; -\\sin \\alpha &amp; 0 \\<br>0 &amp; \\sin \\alpha &amp; \\cos \\alpha &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<p>$$<br>R_{y} \\left ( \\alpha  \\right )<br>=<br>\\begin{pmatrix}<br>\\cos \\alpha &amp; 0 &amp; \\sin \\alpha &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; 0 \\<br>-\\sin \\alpha &amp; 0 &amp; \\cos \\alpha &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<p>$$<br>R_{z} \\left ( \\alpha  \\right )<br>=<br>\\begin{pmatrix}<br>\\cos \\alpha &amp; -\\sin \\alpha &amp; 0 &amp; 0 \\<br>\\sin \\alpha &amp; \\cos \\alpha &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<p>下面是绕任意轴n（当成以原点为起点的向量）旋转任意角度的变换矩阵（Rodrigues’ rotation formula，罗德里格旋转公式）。</p>\n<p>$$<br>R_{n} ( \\vec{n}, \\alpha ) =<br>\\cos (\\alpha ) \\mathbf{I} +<br>(1 - \\cos (\\alpha ))\\mathbf{n} \\mathbf{n}^{T} +<br>\\sin (\\alpha )<br>\\begin{pmatrix}<br> 0 &amp; -n_{z} &amp; n_{y} \\<br> n_{z} &amp; 0 &amp; -n_{x} \\<br> -n_{y} &amp; n_{x} &amp; 0<br>\\end{pmatrix}<br>$$</p>\n<h3 id=\"视图变换\"><a href=\"#视图变换\" class=\"headerlink\" title=\"视图变换\"></a>视图变换</h3><p>原文为View/Camera Transformation，别名ModelView Transformation。目的是把<strong>世界坐标转换成摄像机坐标</strong>（以摄像机为原点）。</p>\n<p>具体为先<strong>平移</strong>到原点，再<strong>旋转</strong>。<br>$$<br>M_{view} = R_{view}T_{view}<br>$$</p>\n<p>其中需要向量<strong>e</strong>表示相机<strong>位置</strong>、向量<strong>g</strong>表示相机<strong>面对</strong>的方向、向量<strong>t</strong>表示相机<strong>向上</strong>的方向。具体转动为：</p>\n<ul>\n<li>g 到 -z</li>\n<li>t 到 Y</li>\n<li>(g x t) 到 x</li>\n</ul>\n<p>因为旋转变换矩阵为正交矩阵，所以矩阵的逆等于矩阵的转置。矩阵的逆就是反方向旋转。所以可以先根据反方向旋转求出所需矩阵的逆，再转置得到我们需要的旋转变换矩阵。（反方向旋转矩阵更好推出）</p>\n<p>反向旋转矩阵实际就是求解这个方程组：(g x t) = R<sup>-1</sup>X，t = R<sup>-1</sup>Y，-g = R<sup>-1</sup>Z。因为X Y Z的数值特殊，所以等式左边三个变量就是答案。</p>\n<p>下面是平移矩阵T和旋转矩阵R<br>$$<br>T_{view} =<br>\\begin{pmatrix}<br> 1 &amp; 0 &amp; 0 &amp; -x_{e}\\<br> 0 &amp; 1 &amp; 0 &amp; -y_{e} \\<br> 0 &amp; 0 &amp; 1 &amp; -z_{e} \\<br> 0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<p>$$<br>R^{-1}<em>{view} =<br>\\begin{pmatrix}<br> (g \\times t)</em>{x} &amp; t_{x} &amp; -g_{x} &amp; 0\\<br> (g \\times t)<em>{y} &amp; t</em>{y} &amp; -g_{y} &amp; 0 \\<br> (g \\times t)<em>{z} &amp; t</em>{z} &amp; -g_{z} &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<p>$$<br>R_{view} =<br>\\begin{pmatrix}<br> (g \\times t)<em>{x} &amp; (g \\times t)</em>{y} &amp; (g \\times t)<em>{z} &amp; 0\\<br> t</em>{x} &amp; t_{y} &amp; t_{z} &amp; 0 \\<br> -g_{x} &amp; -g_{y} &amp; -g_{z} &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<h3 id=\"投影变换\"><a href=\"#投影变换\" class=\"headerlink\" title=\"投影变换\"></a>投影变换</h3><p>投影变换就是把被投影的区域进行正则化处理，转成[-1, 1]<sup>3</sup>。</p>\n<h4 id=\"正交投影\"><a href=\"#正交投影\" class=\"headerlink\" title=\"正交投影\"></a>正交投影</h4><p>正交投影的投影变换就是做一次正则化就可以了，正则化是先把中心先<strong>平移到原点</strong>，再**缩放至[-1, 1]<sup>3</sup>**。</p>\n<p>需要注意的是：因为我们设定相机<strong>面向-z轴</strong>，所以对于z坐标的数值，近的一面上要大于远的一面。即<strong>z越大越近</strong>。</p>\n<p>下面是正交投影的投影变换，实际就是长方体的正则化，先平移再缩放：<br>（从原点看向投影区域：n、f分别是近、远面的z；t、b分别是上、下面的y；l、r分别是左右面的x）<br>$$<br>M_{ortho}=<br>\\begin{pmatrix}<br> \\frac{2}{r-l} &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; \\frac{2}{t-b} &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; \\frac{2}{n-f} &amp; 0 \\<br> 0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>\\begin{pmatrix}<br> 1 &amp; 0 &amp; 0 &amp; -\\frac{r+l}{2} \\<br> 0 &amp; 1 &amp; 0 &amp; -\\frac{t+b}{2} \\<br> 0 &amp; 0 &amp; 1 &amp; -\\frac{n+f}{2} \\<br> 0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<h4 id=\"透视投影\"><a href=\"#透视投影\" class=\"headerlink\" title=\"透视投影\"></a>透视投影</h4><p>先把投影区域转成长方体。根据相似三角形，把大小（x和y的范围）缩放到最近一面的大小。然后再保证近面和远面的z不变。</p>\n<p>如果要保证所有z都不变，则无法求出一个只与最近和最远面有关的转换矩阵。</p>\n<p>最后得到透视转正交的矩阵如下，其中n是近面的z，f是远面的z：<br>$$<br>M_{persp \\to ortho}=<br>\\begin{pmatrix}<br>n &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; n &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; n+f &amp; -nf \\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\\end{pmatrix}<br>$$<br>代入任意一点得到如下结果：<br>$$<br>\\begin{pmatrix}<br> n &amp; 0 &amp; 0 &amp; 0 \\<br> 0 &amp; n &amp; 0 &amp; 0 \\<br> 0 &amp; 0 &amp; n+f &amp; -nf \\<br> 0 &amp; 0 &amp; 1 &amp; 0<br>\\end{pmatrix}<br>\\begin{pmatrix}<br> x \\<br> y \\<br> z \\<br> 1<br>\\end{pmatrix}<br>=<br>\\begin{pmatrix}<br> nx \\<br> ny \\<br> z(n+f)-nf \\<br> z<br>\\end{pmatrix}<br>\\Leftrightarrow<br>\\begin{pmatrix}<br> \\frac{n}{z}x \\<br> \\frac{n}{z}y \\<br> (n+f)-\\frac{nf}{z} \\<br> 1<br>\\end{pmatrix}<br>$$<br>可以看到当z=n或z=f时，最后结果代表的点的z都不变。<br>除z=n和z=f的点，其他点都变得<strong>更靠近f面</strong>。</p>\n<p>经过透视转正交得到的区域就变成了长方体，再做一次正交投影转换，就得到了正则化的透视投影转换。<br>$$<br>M_{persp} = M_{ortho}M_{persp \\to ortho}<br>$$</p>\n<h2 id=\"5-光栅化-1-三角形\"><a href=\"#5-光栅化-1-三角形\" class=\"headerlink\" title=\"5 光栅化 1 三角形\"></a>5 光栅化 1 三角形</h2><h3 id=\"摘要-3\"><a href=\"#摘要-3\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><p>补充透视投影之后的工作，根据画面大小拉伸。</p>\n<p>主要讲通过采样实现光栅化三角形。</p>\n<h3 id=\"透视投影之后\"><a href=\"#透视投影之后\" class=\"headerlink\" title=\"透视投影之后\"></a>透视投影之后</h3><p>此时已经完成正则化（MVP），模型三维的x、y对应与屏幕二维的x、y轴，显然屏幕原点在左下角。</p>\n<p>首先自定义纵横比：aspect ratio = width / height<br>还有自定义视角（视野，垂直方向视角）：field-of-view(fovY)</p>\n<p>设画面上端y坐标为 t（t = height / 2）<br>设画面右端x坐标为 r（r = width / 2）<br>根据前面定义近平面的z坐标为n（n&lt;0）</p>\n<p>易得出以下关系：<br>$$<br>\\tan \\frac{fovY}{2} = \\frac{t}{|n|}<br>$$</p>\n<p>$$<br>aspect = \\frac{r}{t}<br>$$</p>\n<p>$$<br>height = 2 \\times |n| \\times \\tan \\frac{fovY}{2}<br>$$</p>\n<p>$$<br>width = aspect \\times height<br>$$</p>\n<h3 id=\"从-标准立方体-到-屏幕\"><a href=\"#从-标准立方体-到-屏幕\" class=\"headerlink\" title=\"从 标准立方体 到 屏幕\"></a>从 标准立方体 到 屏幕</h3><p>忽略z轴。</p>\n<p>首先拉伸 [-1,1]<sup>2</sup> 到 [0, w] x [0, h]（w=width，h=height）<br>$$<br>M_{viewport} =<br>\\begin{pmatrix}<br> \\frac{w}{2} &amp; 0 &amp; 0 &amp; \\frac{w}{2}\\<br> 0 &amp; \\frac{h}{2} &amp; 0 &amp; \\frac{h}{2}\\<br> 0 &amp; 0 &amp; 1 &amp; 0\\<br> 0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$<br>屏幕像素Pixel(x, y) 对应 (x + 0.5, y + 0.5)</p>\n<h3 id=\"将-三角形-光栅化为-像素\"><a href=\"#将-三角形-光栅化为-像素\" class=\"headerlink\" title=\"将 三角形 光栅化为 像素\"></a>将 三角形 光栅化为 像素</h3><h4 id=\"采样\"><a href=\"#采样\" class=\"headerlink\" title=\"采样\"></a>采样</h4><p>采样是一种思路，将连续的图形<strong>离散化</strong>。</p>\n<p>比如三角形网格的光栅化，采样就是将图像分成许多离散的点，然后判断点是否在三角形内，然后绘制出在三角形内的点，来表示三角形。</p>\n<p>大概代码如下：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">for(int y &#x3D; 0; y &lt; ymax; y++)\n    for(int x &#x3D; 0; x &lt; xmax; x++)\n        image[y][x] &#x3D; inside(tri, x + 0.5, y + 0.5);</code></pre>\n\n<h4 id=\"采样细节处理\"><a href=\"#采样细节处理\" class=\"headerlink\" title=\"采样细节处理\"></a>采样细节处理</h4><p><strong>判断是否在三角形内：</strong></p>\n<p>参考前面线性代数的叉乘，判断是否在三条边的同一边即可。</p>\n<p><strong>三角形的边缘：</strong></p>\n<p>可以随意处理也可以特殊处理。某些库是绘制上和左边界。</p>\n<p><strong>采样的优化：</strong></p>\n<p><strong>AABB包围盒</strong>（Axis-aligned bounding box），中文意为轴向包围盒。顾名思义，用一个最小矩形包围三角形，然后只对矩形内的点采样。显然取三角形顶点坐标极值即可确定包围盒。<br>缺点是对于45度，窄的三角形，效率很低。</p>\n<p>还有三角形扫描线差值等方法。</p>\n","count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#games101\"><span class=\"toc-text\">games101</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-CG%E6%A6%82%E5%86%B5\"><span class=\"toc-text\">1 CG概况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E7%A8%8B%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">课程主要内容</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0\"><span class=\"toc-text\">2 线性代数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E9%87%8F-%E7%82%B9%E4%B9%98-%E5%8F%89%E4%B9%98\"><span class=\"toc-text\">向量 点乘 叉乘</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">3 变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81-1\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">线性变换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87-%E4%B8%8E-%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">齐次坐标 与 仿射变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87\"><span class=\"toc-text\">齐次坐标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">仿射变换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E5%A4%8D%E6%9D%82%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">组合复杂变换</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%8F%98%E6%8D%A22%EF%BC%883d%E5%8F%98%E6%8D%A2%E4%B8%8E%E8%A7%82%E5%AF%9F%E5%8F%98%E6%8D%A2%EF%BC%89\"><span class=\"toc-text\">4 变换2（3d变换与观察变换）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81-2\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3D-%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">3D 旋转变换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%9B%BE%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">视图变换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%95%E5%BD%B1%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">投影变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E4%BA%A4%E6%8A%95%E5%BD%B1\"><span class=\"toc-text\">正交投影</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1\"><span class=\"toc-text\">透视投影</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%85%89%E6%A0%85%E5%8C%96-1-%E4%B8%89%E8%A7%92%E5%BD%A2\"><span class=\"toc-text\">5 光栅化 1 三角形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%91%98%E8%A6%81-3\"><span class=\"toc-text\">摘要</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1%E4%B9%8B%E5%90%8E\"><span class=\"toc-text\">透视投影之后</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E-%E6%A0%87%E5%87%86%E7%AB%8B%E6%96%B9%E4%BD%93-%E5%88%B0-%E5%B1%8F%E5%B9%95\"><span class=\"toc-text\">从 标准立方体 到 屏幕</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86-%E4%B8%89%E8%A7%92%E5%BD%A2-%E5%85%89%E6%A0%85%E5%8C%96%E4%B8%BA-%E5%83%8F%E7%B4%A0\"><span class=\"toc-text\">将 三角形 光栅化为 像素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%87%E6%A0%B7\"><span class=\"toc-text\">采样</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%87%E6%A0%B7%E7%BB%86%E8%8A%82%E5%A4%84%E7%90%86\"><span class=\"toc-text\">采样细节处理</span></a></li></ol></li></ol></li></ol></li></ol>"}